#
# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: Test stack for REST API GW with private endpoint
Outputs:
  RestApiGwUsagePlanId:
    Description: Usage Plan Id
    Value:
      Ref: UsagePlan
  RestApiGwId:
    Description: The ID of the REST API Gateway
    Value: !Ref ApplicationsApi
  RestApiGwStageName:
    Description: The stage name of the REST API Gateway
    Value: !Ref ApplicationsApiStage
  RestApiGwDeploymentId:
    Description: The deployment ID of the REST API Gateway
    Value: !Ref ApplicationsApiDeployment
  RestApiGwHost:
    Description: The hostname of the REST API Gateway
    Value: !Sub "${ApplicationsApi}-${ApiGatewayVpcEndpoint}.execute-api.${AWS::Region}.amazonaws.com"
  ApiKeyId:
    Description: The ID of API key
    Value: !Ref ApiKey
  RestApiGwResourceId:
    Description: The ID of REST API Gateway resource
    Value: !Ref ApiGatewayResource
  LambdaArn:
    Description: The ARN for Lambda function which is used to generate traffic
    Value: !GetAtt LambdaFunction.Arn
  CountAlarmName:
    Description: REST API GW Alarm based on Count metric
    Value: !Ref CountAlarm
  AlwaysOKAlarmName:
    Description: Dummy alarm, used in Cucumber tests
    Value: !Ref AlwaysOKAlarm
  SecurityGroupId:
    Description: The ID of security group
    Value: !Ref VpcEndpointSecurityGroup
Parameters:
  VpcCIDR:
    Description: IP range in CIDR notation for the VPC
    Type: String
    Default: 10.0.0.0/24
  PrivateSubnetCIDR:
    Description: IP range in CIDR notation for the private subnet
    Type: String
    Default: 10.0.0.0/24
  RestApiGwQuotaLimit:
    Description: Usage Plan limit value
    Type: String
    Default: 50000
  RestApiGwQuotaPeriod:
    Description: Usage Plan limit value
    Type: String
    Default: WEEK
Resources:
  # Network resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Lambda"
      GroupDescription: "Lambda security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref PrivateSubnetCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnetCIDR

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ApiGatewayVpcEndpoint"
      GroupDescription: "API Gateway VPC Endpoint security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref PrivateSubnetCIDR

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  ApiGatewayVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      SubnetIds:
        - !Ref PrivateSubnet
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  # REST API Gateway resources
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ApplicationsApi
          Stage: !Ref ApplicationsApiStage
          Throttle:
            "*/*":
              BurstLimit: 80
              RateLimit: 80
      Description: Test Usage Plan
      Quota:
        Limit: !Ref RestApiGwQuotaLimit
        Offset: 0
        Period: !Ref RestApiGwQuotaPeriod
      Throttle:
        BurstLimit: 100
        RateLimit: 100
      UsagePlanName: !Join
        - "-"
        - - "RestApiGateway-UsagePlan-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"

  ApplicationsApiStage:
    DependsOn: ApiAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      TracingEnabled: true
      RestApiId: !Ref ApplicationsApi
      StageName: !Join
        - "-"
        - - "RestApiGateway-Stage-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      DeploymentId: !Ref ApplicationsApiDeployment
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true

  ApplicationsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join
        - "-"
        - - "RestApiGateway-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Test API
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - PRIVATE
        VpcEndpointIds:
          - !Ref ApiGatewayVpcEndpoint
      Policy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Deny",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*",
              "Condition": {
                "StringNotEquals": {
                  "aws:SourceVpce": "${ApiGatewayVpcEndpoint}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*"
            }
          ]
        }

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApplicationsApi.RootResourceId
      PathPart: 'app'
      RestApiId: !Ref ApplicationsApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApplicationsApi
      Schema: { }

  ApiGatewayMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResource
      RestApiId:
        !Ref ApplicationsApi
      OperationName: 'app'
      ApiKeyRequired: True
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseTemplates:
              application/json: '{"message": "OK"}'
            SelectionPattern: '2\d{2}'
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: !Ref ApiGatewayModel
          StatusCode: "200"

  ApiGatewayPushToCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      Description: 'Push logs to CloudWatch logs from API Gateway'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub ${ApiGatewayPushToCloudWatchRole.Arn}

  ApplicationsApiDeployment:
    DependsOn: ApiGatewayMethodGet
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApplicationsApi

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: 'Test API Key'
      Enabled: True
      StageKeys:
        - RestApiId: !Ref ApplicationsApi
          StageName: !Ref ApplicationsApiStage

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Alarm resources
  CountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: false
      AlarmDescription: 'api-gw:alarm:count:2020-04-01'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Join
            - "-"
            - - "RestApiGateway-Digito"
              - !Ref "AWS::Region"
              - !Ref "AWS::AccountId"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
        - Name: Stage
          Value: !Ref ApplicationsApiStage
      EvaluationPeriods: 3
      DatapointsToAlarm: 1
      MetricName: Count
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Average
      Threshold: 1
      TreatMissingData: breaching

  AlwaysOKAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: false
      AlarmDescription: 'api-gw:alarm:always_ok:2021-03-24'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: AlwaysOK
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Minimum
      Threshold: 100
      TreatMissingData: notBreaching

  # Lambda resources
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 2
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Environment:
        Variables:
          Host:
            !Sub '${ApplicationsApi}-${ApiGatewayVpcEndpoint}.execute-api.${AWS::Region}.amazonaws.com'
          Path:
            !Sub '/${ApplicationsApiStage}/app'
      Code:
        ZipFile: >
          import http.client

          import logging

          from socket import gethostbyname

          from time import sleep

          from os import getenv


          log = logging.getLogger()

          log.setLevel(logging.DEBUG)


          def lambda_handler(event, context):
              host = event['host'] if 'host' in event else getenv('Host')
              path = event['path'] if 'path' in event else getenv('Path', '/')
              api_key = event['api_key'] if 'api_key' in event else getenv('ApiKey')
              method = event['method'] if 'method' in event else 'GET'
              request_interval = event['request_interval'] if 'interval' in event else getenv('RequestInterval', 10)
              request_count = event['request_count'] if 'request_count' in event else getenv('RequestCount', 6)

              log.debug(f'Ip: {gethostbyname(host)}, Host: {host}, Path: {path}, Method: {method}')
              log.debug(f'Count: {request_count}, Interval: {request_interval}')

              while request_count > 0:
                  try:
                      connection = http.client.HTTPSConnection(host, timeout=request_interval)
                      connection.request(method, path, headers={'x-api-key': api_key})
                      response = connection.getresponse()
                      log.info(f'Status: {response.status}, Reason: {response.reason}, Body: {response.read()}')
                      sleep(request_interval)
                  except Exception as e:
                      log.warning(f'Exception: {e}')
                  finally:
                    connection.close()
                    request_count -= 1


  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: v1

  LambdaActualAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version
      Name: actual

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Lambda Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - "-"
        - - "LambdaPolicy-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApplicationsApi}/${ApplicationsApiStage}/*/*'
            Action:
              - execute-api:Invoke
          - Effect: Allow
            Resource:
              - !GetAtt LambdaRole.Arn
            Action:
              - iam:PassRole
      Roles:
        - Ref: LambdaRole
