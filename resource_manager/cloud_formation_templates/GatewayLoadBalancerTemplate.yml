#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: Test stack for gateway load-balancer
Outputs:
  GatewayELBArn:
    Description: Gateway Load Balancer ARN
    Value: !Ref  GatewayELB
  GatewayELBFullName:
    Description: The Gateway Elastic Load Balancer Key For Alarm Setup
    Value: !GetAtt GatewayELB.LoadBalancerFullName
  TargetGroup:
    Description: TargetGroup name
    Value: !GetAtt GLBTargetGroup.TargetGroupFullName
  TargetGroupArn:
    Description: TargetGroup Arn
    Value: !Ref GLBTargetGroup
Parameters:
  VPC:
    Type: String
    Description: VPC ID
  VPCCidr:
    Type: String
    Description: VPC Cidr
  Subnet:
    Type: String
    Description: Subnet ID
  InstanceType:
    Type: String
    Default: t3.small
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  ListenPort:
    Type: String
    Default: 80
Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ec2 hosts
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: !Ref ListenPort
          ToPort: !Ref ListenPort
          CidrIp: !Ref VPCCidr

  GatewayELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      SubnetMappings:
        - SubnetId: !Ref Subnet
      Type: gateway

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GLBTargetGroup
      LoadBalancerArn: !Ref GatewayELB
      Port: !Ref ListenPort
      Protocol: TCP

  GLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: !Ref ListenPort
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 6081
      Protocol: GENEVE
      Targets:
        - Id:
            Ref: AmazonLinuxInstance
          Port: 6081
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  # Linux Instance with Apache running on Port 80
  AmazonLinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref InstanceType
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId:
            Ref: Subnet
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          yum update -y
          yum install -y httpd
          echo "Healthy" > /var/www/html/index.html
          service httpd start
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource AmazonLinuxInstance \
            --region ${AWS::Region}
