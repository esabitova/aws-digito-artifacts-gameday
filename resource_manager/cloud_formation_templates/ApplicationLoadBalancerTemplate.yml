#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: Test stack for ApplicationELB and related resources. Contains all alarms
Outputs:
  ApplicationELBArn:
    Description: The Application Elastic Load Balancer
    Value: !Ref ApplicationELB
  ApplicationELBUrl:
    Description: The Application Elastic Load Balancer DNS Name
    Value: !GetAtt ApplicationELB.DNSName
  ApplicationELBFullName:
    Description: The Application Elastic Load Balancer Key For Alarm Setup
    Value: !GetAtt ApplicationELB.LoadBalancerFullName
  ProxyLambdaArn:
    Description: The ARN for Lambda function which is used to trigger requests to private ELB endpoint
    Value: !GetAtt ProxyLambdaFunction.Arn
  LambdaTargetFullName:
    Description: Target group full name
    Value: !GetAtt TargetGroupLambda.TargetGroupFullName
  UnhealthyTargetFullName:
    Description: Unhealthy target group full name
    Value: !GetAtt UnhealthyTargetGroupLambda.TargetGroupFullName
  HealthyTargetFullName:
    Description: Healthy target group full name
    Value: !GetAtt ProxyLambdaTargetGroupForHealthCheck.TargetGroupFullName
  LoadBalancerSecurityGroup:
    Description: Security group id attached to load balancer
    Value: !Ref LoadBalancerSG01
Parameters:
  VPC:
    Type: String
    Description: VPC ID
  Subnet1:
    Type: String
    Description: Subnet ID
  Subnet2:
    Type: String
    Description: Subnet ID
  Subnet3:
    Type: String
    Description: Subnet ID
  VPCCidr:
    Type: String
    Description: Subnet CIDR
  EC2Subnet:
    Type: String
    Default: ""
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Type: String
    Default: t3.small
  ListenPort:
    Type: String
    Default: 80
  SSLCertificateBody:
    Type: String
    Default: |
      -----BEGIN CERTIFICATE-----
      MIIDBjCCAe4CCQC/gsk8A/TgUjANBgkqhkiG9w0BAQsFADBFMQswCQYDVQQGEwJV
      UzEYMBYGA1UECgwPX0RldmVsb3BtZW50IENBMRwwGgYDVQQDDBMqLmVsYi5hbWF6
      b25hd3MuY29tMB4XDTIxMDgxMDE2MDQ0N1oXDTIyMDgxMDE2MDQ0N1owRTELMAkG
      A1UEBhMCVVMxGDAWBgNVBAoMD19EZXZlbG9wbWVudCBDQTEcMBoGA1UEAwwTKi5l
      bGIuYW1hem9uYXdzLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
      AM8nrJDtLHcTFvmsi13BWZKuoFRE1/zy1to2RNXYQZSKOmD2Z5tNjRcKwVRapFG0
      u6TaXZWquO4h7ERxGkgInufEFAt4BLr3AbXfZ2DGNmMcjint+SaoDvsfmjDfpJV5
      Dfk7ht6xJkDjwSNAaHSmQEAx2sevANfO9hZsc7bQzFQetwoSVnNrCedckTQcpcbz
      joNNRMY74u9cOvG7QAboqA9/K3iJv3buStZ+krGT2qpK1W/AliW8erS1jz9C4Hav
      F6vur5vGHglmGdRULNb1vvC1Qj6ohgrCD1dkiTj8ZQRkTqrGFzZjqL8lAuyslNNd
      OLvnKvKp1FVW/b68dSQzKocCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAZL2jqQgF
      CUG9H5c5D5XhQoM9bMBF8G/iw4btOYSM0DEKzLJFObpPmZvWCH7EMaWNJOKA6Eza
      WPKXplpYTDIiKqa88kptp08cal48hxH9+O4nodlIbGxtRIXC2n2ZwBN0Ysgwo3TL
      HDU2IDgzZuA3gYBhG5u29uhIMJ+TvlfkcSwz8CbjdJc+2/SL7jIOcieMve8zpwLL
      tValKMoOk17B57ODKepyVPX06d+ugqyp+41cWE4azddYHo5xk21T+GjNoSKipPye
      v3rYHWzLv/C9XMY9oJ3woF0jfv1U1YsbX9JvCRz7F56LNde/zbztncdGvaPWZUlI
      10CZ+4fEyDBSUQ==
      -----END CERTIFICATE-----

  SSLCertificatePrivateKey:
    Type: String
    Default: |
      -----BEGIN PRIVATE KEY-----
      MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPJ6yQ7Sx3Exb5
      rItdwVmSrqBURNf88tbaNkTV2EGUijpg9mebTY0XCsFUWqRRtLuk2l2VqrjuIexE
      cRpICJ7nxBQLeAS69wG132dgxjZjHI4p7fkmqA77H5ow36SVeQ35O4besSZA48Ej
      QGh0pkBAMdrHrwDXzvYWbHO20MxUHrcKElZzawnnXJE0HKXG846DTUTGO+LvXDrx
      u0AG6KgPfyt4ib927krWfpKxk9qqStVvwJYlvHq0tY8/QuB2rxer7q+bxh4JZhnU
      VCzW9b7wtUI+qIYKwg9XZIk4/GUEZE6qxhc2Y6i/JQLsrJTTXTi75yryqdRVVv2+
      vHUkMyqHAgMBAAECggEAejc091gGOMY5ctoaaxjsiL6f9rebGjAHFDyaRfPNVR5s
      LNKS86xARkzhHKxRb6cKYcs3FVrguhWneAWmdMMpRSGIle+cEtYx2yRPsGegpL6v
      HQu6R9U06XGOnbEEP+9okBdPjcjEAdqdEvgn6FJBa9497jtQawI+a6JWbpAnTKS1
      hBZF/kTCf1QUHFu+JuHaRLk7A/hgqGsS1xcFTQV9Cbx9nkJSn0xNxpXvB+/S3xpX
      wp+SnC/KPoKFf7GPhl8W2Z7g0O9MlXZSBaCIdj7NsVrujrK5Br1i7jzhUU9W1qLY
      x59KnoV2vZhVVwaicU/6fxtAPkhp4PfRyOQip/Z9+QKBgQD8iFWxI6pP/QH1tlyQ
      0k5iPsYEebJufU10Tm0kMpOVncqZ7s/ByH9xiMdFPvX5EPObSE19fR4a9ZL9eFZQ
      r/CKietkSAac9UM+CHJaw5EQy7ZAs+PhBeWhJ9vpSF4zKoOu76Sse3DLAHL3j2nE
      9/Lw8KxPtSSYtRLKqInpbkx8PQKBgQDR/9Wy8MbOS1In9y4SnvTeXIoPaIqCk3gM
      N3at8NmpzgZUHermn38fae/BaIiwU4BTD/uPSBofsX2iX9ksiPW/uBKLy/v095gB
      xJ8xchx3N0JeT51Pq+s0OLYsY6+nPAkU/D9Sf61bgosev4XmMKM3KVJ/Yk1e5LkA
      dvNFp0LaEwKBgQDv9pEPASf+WBm7pazyBJVtL980M3wFF9Y41alKQzEQc98oRNBw
      gJfxh5prR3euU5hYjuzreK/ZyE8DwoyqoXS+AG6IXRTDox9hW99mNf2r6xdlBktc
      8SCR8XE7jIPOtPBqk9dz+txkWink6gcEnuPgZaInH6cF4NJZdquOADx3tQKBgQDB
      4OsRK87AQzX0g/bbZjo42UL1etT2PORGkyZU7NpoNTgOjRiEF5ksDYg3DiW0dUMy
      bL0Zyb2kqR+Ou+MrhL8uY+lre8aAod6LM1auNeYmArSZkfNwzQ53xiway2YuhfT0
      lPZ5WjtZEysSFkyu+xSVJudth/pas9xBm5B6LDRCVQKBgH+cse+JpgirMsdyAQ/C
      /idAV7Mt23Xz6LV1FKdXXVxV+HMGy7XVMlcyWrrBJB7ydouqJ2s/apxzn5nglGoX
      UhSDAkFfjNTnyh10qgiBDIcsohicdxMIYGyIMGl8C0Cbzd1bwneu2W3lL3hZD4RK
      KWeMzqbYKrW7t9ud74ONZ4Uu
      -----END PRIVATE KEY-----
Conditions:
  UseCustomSubnet: !Equals [!Ref EC2Subnet, ""]

Resources:
  LoadBalancerSG01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB security group 01"
      GroupName: !Join
        - "-"
        - - "ALB-SG-01"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: !Ref VPCCidr
          FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
        - CidrIp: !Ref VPCCidr
          FromPort: 443
          ToPort: 443
          IpProtocol: "tcp"
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCidr
          FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
        - CidrIp: !Ref VPCCidr
          FromPort: 443
          ToPort: 443
          IpProtocol: "tcp"

  LoadBalancerSG02:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB security group 02"
      GroupName: !Join
        - "-"
        - - "ALB-SG-02"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: !Ref VPCCidr
          FromPort: 82
          ToPort: 82
          IpProtocol: "tcp"
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCidr
          FromPort: 82
          ToPort: 82
          IpProtocol: "tcp"

  LoadBalancerSG03:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB security group 03"
      GroupName: !Join
        - "-"
        - - "ALB-SG-03"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: !Ref VPCCidr
          FromPort: 83
          ToPort: 83
          IpProtocol: "tcp"
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCidr
          FromPort: 83
          ToPort: 83
          IpProtocol: "tcp"

  ProxyLambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Proxy Lambda security group"
      GroupName: !Join
        - "-"
        - - "ProxyLambdaSG"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VPCCidr
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535

  TargetLambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Target Lambda security group"
      GroupName: !Join
        - "-"
        - - "TargetLambdaSG"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VPCCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCidr

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ec2 hosts
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: !Ref ListenPort
          ToPort: !Ref ListenPort
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VPCCidr
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535

  ApplicationELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: 'ipv4'
      Scheme: 'internal'
      Type: 'application'
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      SecurityGroups:
        - !Ref LoadBalancerSG01
        - !Ref LoadBalancerSG02
        - !Ref LoadBalancerSG03
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "3"
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationELB
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "OK"
            StatusCode: "200"

  SSLCertificate:
    Type: AWS::IAM::ServerCertificate
    DependsOn: ApplicationELB
    Properties:
      CertificateBody: !Ref SSLCertificateBody
      PrivateKey: !Ref SSLCertificatePrivateKey
      ServerCertificateName: !Join
        - "-"
        - - "ServerCertificate-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"

  HTTPSListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref ApplicationELB
          Port: 443
          Protocol: "HTTPS"
          SslPolicy: "ELBSecurityPolicy-2016-08"
          Certificates:
            -
              CertificateArn: !GetAtt SSLCertificate.Arn
          DefaultActions:
            - Type: fixed-response
              FixedResponseConfig:
                ContentType: "text/plain"
                MessageBody: "OK"
                StatusCode: "200"

  ListenerRule503:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Response 503"
            StatusCode: "503"
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/response503*"
      ListenerArn: !Ref HTTPListener
      Priority: 1

  ListenerLambda:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupLambda
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/invoke_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 2

  ListenerLambdaUnhealthyResponse:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref UnhealthyTargetGroupLambda
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/unhealthy_ping_invoke_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 3

  TargetTLSErrorRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref EC2TargetGroup
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/target_tls_negotiation_error"
      ListenerArn: !Ref HTTPListener
      Priority: 4

  ListenerProxyLambda:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ProxyLambdaTargetGroupForHealthCheck
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/invoke_proxy_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 5

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref TargetLambdaSG
      Code:
        ZipFile: >
          import logging

          log = logging.getLogger()

          log.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
              path = event['path'] if 'path' in event else 'response503'
              log.debug(f'Lambda function invocation')
              log.debug(f'Path: {path}')
              if path == '/unhealthy_ping_invoke_lambda':
                  return { "statusCode": 500 }
              elif path == '/invoke_lambda/healthy_ping':
                  return { "statusCode": 200, "body": "healthy response 200",
                           "headers": {"Content-Type": "text/plain"} }
              elif path == '/invoke_lambda/trigger_error':
                  raise ValueError('Internal error trigger exception.')
              elif path == '/invoke_lambda/response503':
                  return {
                      "statusCode": 503,
                      "headers": {
                          "Content-Type": "text/plain"
                      },
                      "body": "Lambda Function Response 503"
                  }

  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: v1

  ProxyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
        SecurityGroupIds:
          - !Ref ProxyLambdaSG
      Environment:
        Variables:
          Host: !GetAtt ApplicationELB.DNSName
      Code:
        ZipFile: >
          import http.client

          import logging

          from socket import gethostbyname

          from time import sleep

          from os import getenv

          format = '[%(asctime)s] %(levelname)s %(message)s'

          logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")

          log = logging.getLogger()

          log.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
            host = event['host'] if 'host' in event else getenv('Host', 'localhost')
            path = event['path'] if 'path' in event else getenv('Path', '/')
            schema = event['schema'] if 'schema' in event else getenv('Schema', 'http')
            port = int(event['port']) if 'port' in event else None
            request_interval = event['request_interval'] if 'request_interval' in event else getenv('RequestInterval', 10)
            request_count = event['request_count'] if 'request_count' in event else getenv('RequestCount', 1)
            request_count = int(request_count)
            request_interval = int(request_interval)
            method = 'GET'

            latest_status = ''
            latest_body = ''

            log.debug(f'Ip: {gethostbyname(host)}, Target: {method} {schema}://{host}{path} Port: {port}')
            log.debug(f'Count: {request_count}, Interval: {request_interval}')

            while request_count > 0:
                try:
                    if schema == 'http':
                        connection = http.client.HTTPConnection(host, timeout=request_interval, port=port)
                    elif schema == 'https':
                        connection = http.client.HTTPSConnection(host, timeout=request_interval, port=port)
                    else:
                        raise Exception(f'Unknown schema "{schema}"')
                    connection.request(method, path)
                    response = connection.getresponse()
                    log.info(f'Status: {response.status}, Reason: {response.reason}, Body: {response.read()}')
                    latest_status = response.status
                    latest_body = response.read()
                except Exception as e:
                    log.warning(f'Exception: {e}')
                finally:
                    connection.close()
                    request_count -= 1
                    if request_count > 0:
                      sleep(request_interval)

            return {
                "statusCode": latest_status,
                "headers": {
                    "Content-Type": "text/plain"
                },
                "body": latest_body
            }

  ProxyLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ProxyLambdaFunction
      Description: v1

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Lambda Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - "-"
        - - "LambdaPolicy-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource:
              - !GetAtt LambdaRole.Arn
            Action:
              - iam:PassRole
      Roles:
        - Ref: LambdaRole

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - LambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  TargetLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - ProxyLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  TargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaInvokePermission
    Properties:
      HealthCheckEnabled: false
      Name: LambdaTargets
      TargetType: lambda
      Targets:
        - Id: !GetAtt "LambdaFunction.Arn"

  UnhealthyTargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaInvokePermission
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 11
      HealthCheckPath: "/unhealthy_ping_invoke_lambda"
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: UnhealthyTargetsLambda
      TargetType: lambda
      Targets:
        - Id: !GetAtt "LambdaFunction.Arn"

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Port: 443
      Protocol: HTTPS
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
      Targets:
        - Id:
            Ref: AmazonLinuxInstance
          Port: 443
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  ProxyLambdaTargetGroupForHealthCheck:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - TargetLambdaInvokePermission
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 11
      HealthCheckPath: "/invoke_lambda/healthy_ping"
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: HealthCheckProxyTargetGroup
      TargetType: lambda
      Targets:
        - Id: !GetAtt "ProxyLambdaFunction.Arn"

  AmazonLinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref InstanceType
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !If [UseCustomSubnet, !Ref Subnet2, !Ref EC2Subnet]
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          yum update -y
          yum install -y httpd
          yum install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
          echo "Healthy" > /var/www/html/index.html
          echo "Listen 443" >> /etc/httpd/conf/httpd.conf
          service httpd start
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource AmazonLinuxInstance \
            --region ${AWS::Region}
