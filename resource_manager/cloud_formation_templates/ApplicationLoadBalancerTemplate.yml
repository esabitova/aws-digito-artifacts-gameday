#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: Test stack for ApplicationELB and related resources. Contains all alarms
Outputs:
  ApplicationELBArn:
    Description: The Application Elastic Load Balancer
    Value: !Ref ApplicationELB
  ApplicationELBUrl:
    Description: The Application Elastic Load Balancer DNS Name
    Value: !GetAtt ApplicationELB.DNSName
  ApplicationELBFullName:
    Description: The Application Elastic Load Balancer Key For Alarm Setup
    Value: !GetAtt ApplicationELB.LoadBalancerFullName
  ProxyLambdaArn:
    Description: The ARN for Lambda function which is used to trigger requests to private ELB endpoint
    Value: !GetAtt ProxyLambdaFunction.Arn
  LambdaTargetFullName:
    Description: Target group full name
    Value: !GetAtt TargetGroupLambda.TargetGroupFullName
  UnhealthyTargetFullName:
    Description: Unhealthy target group full name
    Value: !GetAtt UnhealthyTargetGroupLambda.TargetGroupFullName
  HealthyTargetFullName:
    Description: Healthy target group full name
    Value: !GetAtt ProxyLambdaTargetGroupForHealthCheck.TargetGroupFullName
Parameters:
  VPC:
    Type: String
    Description: VPC ID
  Subnet1:
    Type: String
    Description: Subnet ID
  VPCCidr:
    Type: String
    Description: Subnet CIDR
  Subnet2:
    Type: String
    Description: Subnet ID
  Subnet3:
    Type: String
    Description: Subnet ID
Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB security group"
      GroupName: !Join
        - "-"
        - - "ALB-SG"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: !Ref VPCCidr
          FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCidr
          FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"

  ProxyLambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Proxy Lambda security group"
      GroupName: !Join
        - "-"
        - - "ProxyLambdaSG"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VPCCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCidr

  TargetLambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Target Lambda security group"
      GroupName: !Join
        - "-"
        - - "TargetLambdaSG"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VPCCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCidr

  ApplicationELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: 'ipv4'
      Scheme: 'internal'
      Type: 'application'
      Subnets:
        - !Ref Subnet2
        - !Ref Subnet3
      SecurityGroups:
        - !Ref LoadBalancerSG
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "3"
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationELB
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "OK"
            StatusCode: "200"

  ListenerRule503:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Response 503"
            StatusCode: "503"
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/response503*"
      ListenerArn: !Ref HTTPListener
      Priority: 1

  ListenerLambda:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupLambda
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/invoke_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 2

  ListenerLambdaUnhealthyResponse:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref UnhealthyTargetGroupLambda
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/unhealthy_ping_invoke_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 3

  ListenerProxyLambda:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ProxyLambdaTargetGroupForHealthCheck
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/invoke_proxy_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 4

  AlwaysOKAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: false
      AlarmDescription: 'elb:alarm:always_ok:2021-03-24'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: AlwaysOK
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Minimum
      Threshold: 100
      TreatMissingData: notBreaching

  # Lambda resources
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref TargetLambdaSG
      Code:
        ZipFile: >
          import logging

          log = logging.getLogger()

          log.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
              path = event['path'] if 'path' in event else 'response503'
              log.debug(f'Lambda function invocation')
              log.debug(f'Path: {path}')
              if path == '/unhealthy_ping_invoke_lambda':
                  return { "statusCode": 500 }
              elif path == '/invoke_lambda/healthy_ping':
                  return { "statusCode": 200, "body": "healthy response 200",
                           "headers": {"Content-Type": "text/plain"} }
              elif path == '/invoke_lambda/trigger_error':
                  raise ValueError('Internal error trigger exception.')
              elif path == '/invoke_lambda/response503':
                  return {
                      "statusCode": 503,
                      "headers": {
                          "Content-Type": "text/plain"
                      },
                      "body": "Lambda Function Response 503"
                  }

  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: v1

  # Lambda resources
  ProxyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
        SecurityGroupIds:
          - !Ref ProxyLambdaSG
      Environment:
        Variables:
          Host: !GetAtt ApplicationELB.DNSName
      Code:
        ZipFile: >
          import http.client

          import logging

          from socket import gethostbyname

          from time import sleep

          from os import getenv

          format = '[%(asctime)s] %(levelname)s %(message)s'

          logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")

          log = logging.getLogger()

          log.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
            host = event['host'] if 'host' in event else getenv('Host', 'localhost')
            path = event['path'] if 'path' in event else getenv('Path', '/')
            request_interval = event['request_interval'] if 'request_interval' in event else getenv('RequestInterval', 5)
            request_count = event['request_count'] if 'request_count' in event else getenv('RequestCount', 1)
            request_count = int(request_count)
            request_interval = int(request_interval)
            method = 'GET'

            latest_status = ''
            latest_body = ''

            log.debug(f'Ip: {gethostbyname(host)}, Host: {host}, Path: {path}, Method: {method}')
            log.debug(f'Count: {request_count}, Interval: {request_interval}')

            while request_count > 0:
                try:
                    connection = http.client.HTTPConnection(host, timeout=request_interval)
                    connection.request(method, path)
                    response = connection.getresponse()
                    log.info(f'Status: {response.status}, Reason: {response.reason}, Body: {response.read()}')
                    latest_status = response.status
                    latest_body = response.read()
                    sleep(request_interval)
                except Exception as e:
                    log.warning(f'Exception: {e}')
                finally:
                    connection.close()
                    request_count -= 1
            return {
                "statusCode": latest_status,
                "headers": {
                    "Content-Type": "text/plain"
                },
                "body": latest_body
            }

  ProxyLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ProxyLambdaFunction
      Description: v1

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Lambda Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - "-"
        - - "LambdaPolicy-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource:
              - !GetAtt LambdaRole.Arn
            Action:
              - iam:PassRole
      Roles:
        - Ref: LambdaRole

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - LambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  TargetLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - ProxyLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  TargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LambdaInvokePermission
    Properties:
      HealthCheckEnabled: false
      Name: LambdaTargets
      TargetType: lambda
      Targets:
        - Id: !GetAtt "LambdaFunction.Arn"

  UnhealthyTargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LambdaInvokePermission
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 11
      HealthCheckPath: "/unhealthy_ping_invoke_lambda"
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: UnhealthyTargetsLambda
      TargetType: lambda
      Targets:
        - Id: !GetAtt "LambdaFunction.Arn"

  ProxyLambdaTargetGroupForHealthCheck:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - TargetLambdaInvokePermission
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 11
      HealthCheckPath: "/invoke_lambda/healthy_ping"
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: HealthCheckProxyTargetGroup
      TargetType: lambda
      Targets:
        - Id: !GetAtt "ProxyLambdaFunction.Arn"
