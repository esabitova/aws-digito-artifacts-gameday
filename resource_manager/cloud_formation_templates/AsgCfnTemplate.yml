---
AWSTemplateFormatVersion: '2010-09-09'
Description: Autoscaled WebServer behind ELB into Two AZ Public and Private VPC
Parameters:
  VPCCidrBlock:
    Description: VPC CidrIp
    Type: String
    Default: 10.0.0.0/16
  IGWCidrBlock1:
    Description: IGW Routed Subnet CIDR for AZ 1, default Range 10.0.0.1 - 10.0.15.254
    Type: String
    Default: 10.0.0.0/20
  IGWCidrBlock2:
    Description: IGW Routed Subnet CIDR for AZ 2, default Range 10.0.16.1 - 10.0.31.254
    Type: String
    Default: 10.0.16.0/20
  PrivateCidrBlock1:
    Description: Private Subnet CIDR for AZ 1, default Range 10.0.48.1 - 10.0.63.254
    Type: String
    Default: 10.0.48.0/20
  PrivateCidrBlock2:
    Description: Private Subnet CIDR for AZ 2, default Range 10.0.64.1 - 10.0.79.254
    Type: String
    Default: 10.0.64.0/20
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
Mappings:
    AWSInstanceType2Arch:
      t1.micro:
        Arch: HVM64
      t2.nano:
        Arch: HVM64
      t2.micro:
        Arch: HVM64
      t2.small:
        Arch: HVM64
      t2.medium:
        Arch: HVM64
      t2.large:
        Arch: HVM64
      m1.small:
        Arch: HVM64
      m1.medium:
        Arch: HVM64
      m1.large:
        Arch: HVM64
      m1.xlarge:
        Arch: HVM64
      m2.xlarge:
        Arch: HVM64
      m2.2xlarge:
        Arch: HVM64
      m2.4xlarge:
        Arch: HVM64
      m3.medium:
        Arch: HVM64
      m3.large:
        Arch: HVM64
      m3.xlarge:
        Arch: HVM64
      m3.2xlarge:
        Arch: HVM64
      m4.large:
        Arch: HVM64
      m4.xlarge:
        Arch: HVM64
      m4.2xlarge:
        Arch: HVM64
      m4.4xlarge:
        Arch: HVM64
      m4.10xlarge:
        Arch: HVM64
      c1.medium:
        Arch: HVM64
      c1.xlarge:
        Arch: HVM64
      c3.large:
        Arch: HVM64
      c3.xlarge:
        Arch: HVM64
      c3.2xlarge:
        Arch: HVM64
      c3.4xlarge:
        Arch: HVM64
      c3.8xlarge:
        Arch: HVM64
      c4.large:
        Arch: HVM64
      c4.xlarge:
        Arch: HVM64
      c4.2xlarge:
        Arch: HVM64
      c4.4xlarge:
        Arch: HVM64
      c4.8xlarge:
        Arch: HVM64
      g2.2xlarge:
        Arch: HVMG2
      g2.8xlarge:
        Arch: HVMG2
      r3.large:
        Arch: HVM64
      r3.xlarge:
        Arch: HVM64
      r3.2xlarge:
        Arch: HVM64
      r3.4xlarge:
        Arch: HVM64
      r3.8xlarge:
        Arch: HVM64
      i2.xlarge:
        Arch: HVM64
      i2.2xlarge:
        Arch: HVM64
      i2.4xlarge:
        Arch: HVM64
      i2.8xlarge:
        Arch: HVM64
      d2.xlarge:
        Arch: HVM64
      d2.2xlarge:
        Arch: HVM64
      d2.4xlarge:
        Arch: HVM64
      d2.8xlarge:
        Arch: HVM64
      hi1.4xlarge:
        Arch: HVM64
      hs1.8xlarge:
        Arch: HVM64
      cr1.8xlarge:
        Arch: HVM64
      cc2.8xlarge:
        Arch: HVM64
    AWSRegionArch2AMI:
      us-east-1:
        HVM64: ami-0ff8a91507f77f867
        HVMG2: ami-0a584ac55a7631c0c
      us-west-2:
        HVM64: ami-a0cfeed8
        HVMG2: ami-0e09505bc235aa82d
      us-west-1:
        HVM64: ami-0bdb828fd58c52235
        HVMG2: ami-066ee5fd4a9ef77f1
      eu-west-1:
        HVM64: ami-047bb4163c506cd98
        HVMG2: ami-0a7c483d527806435
      eu-west-2:
        HVM64: ami-f976839e
        HVMG2: NOT_SUPPORTED
      eu-west-3:
        HVM64: ami-0ebc281c20e89ba4b
        HVMG2: NOT_SUPPORTED
      eu-central-1:
        HVM64: ami-0233214e13e500f77
        HVMG2: ami-06223d46a6d0661c7
      ap-northeast-1:
        HVM64: ami-06cd52961ce9f0d85
        HVMG2: ami-053cdd503598e4a9d
      ap-northeast-2:
        HVM64: ami-0a10b2721688ce9d2
        HVMG2: NOT_SUPPORTED
      ap-northeast-3:
        HVM64: ami-0d98120a9fb693f07
        HVMG2: NOT_SUPPORTED
      ap-southeast-1:
        HVM64: ami-08569b978cc4dfa10
        HVMG2: ami-0be9df32ae9f92309
      ap-southeast-2:
        HVM64: ami-09b42976632b27e9b
        HVMG2: ami-0a9ce9fecc3d1daf8
      ap-south-1:
        HVM64: ami-0912f71e06545ad88
        HVMG2: ami-097b15e89dbdcfcf4
      us-east-2:
        HVM64: ami-0b59bfac6be064b78
        HVMG2: NOT_SUPPORTED
      ca-central-1:
        HVM64: ami-0b18956f
        HVMG2: NOT_SUPPORTED
      sa-east-1:
        HVM64: ami-07b14488da8ea02a0
        HVMG2: NOT_SUPPORTED
      cn-north-1:
        HVM64: ami-0a4eaf6c4454eda75
        HVMG2: NOT_SUPPORTED
      cn-northwest-1:
        HVM64: ami-6b6a7d09
        HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Metadata:
      License: 'MIT No Attribution:  Permission is hereby granted, free of charge,
        to any person obtaining a copy of this software and associated documentation
        files (the "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish, distribute,
        sublicense, and/or sell copies of the Software, and to permit persons to whom
        the Software is furnished to do so.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
        WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
        WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
        ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
        DEALINGS IN THE SOFTWARE.'
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCidrBlock
      Tags:
      - Key: Name
        Value: ResiliencyVPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: ResiliencyVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  IGWSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock:
        Ref: IGWCidrBlock1
      Tags:
      - Key: Name
        Value: ResiliencyVPC-IGWSubnet1
  IGWSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock:
        Ref: IGWCidrBlock2
      Tags:
      - Key: Name
        Value: ResiliencyVPC-IGWSubnet2
  IGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: ResiliencyVPC-IGWRoute
  IGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: IGWRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  IGWSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: IGWSubnet1
      RouteTableId:
        Ref: IGWRouteTable
  IGWSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: IGWSubnet2
      RouteTableId:
        Ref: IGWRouteTable
  WebELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Server ELB Security group - open to all on 80 and 443
      VpcId:
        Ref: VPC
  WebELBSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WebELBSG
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: '0.0.0.0/0'
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Server Security group - open to WebELBSG on 80 and 443
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: '0.0.0.0/0'
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock:
        Ref: PrivateCidrBlock1
      Tags:
      - Key: Name
        Value: ResiliencyVPC-PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock:
        Ref: PrivateCidrBlock2
      Tags:
      - Key: Name
        Value: ResiliencyVPC-PrivateSubnet2
  NAT1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT1EIP
        - AllocationId
      SubnetId:
        Ref: IGWSubnet1
      Tags:
      - Key: Name
        Value: ResiliencyVPC-PrivateSubnetNAT1
  NATGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT2EIP
        - AllocationId
      SubnetId:
        Ref: IGWSubnet2
      Tags:
      - Key: Name
        Value: ResiliencyVPC-PrivateSubnetNAT2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: ResiliencyVPC-PrivateSubnetRoute1
  NAT1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGW1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: ResiliencyVPC-PrivateSubnetRoute2
  NAT2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGW2
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable1
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable2
  WebServerRole:
    Metadata:
      License: 'MIT No Attribution:  Permission is hereby granted, free of charge,
        to any person obtaining a copy of this software and associated documentation
        files (the "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish, distribute,
        sublicense, and/or sell copies of the Software, and to permit persons to whom
        the Software is furnished to do so.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
        WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
        WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
        ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
        DEALINGS IN THE SOFTWARE.'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: WebServerRole
  WebServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_config-amazon-cloudwatch-agent
            - 02_restart-amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        01_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "root"
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "aggregation_dimensions" : [["AutoScalingGroupName"],["AutoScalingGroupName", "InstanceId"]],
                    "metrics_collected": {
                      "collectd": {
                        "metrics_aggregation_interval": 60
                      },
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": ["*"],
                        "totalcpu": true
                      },
                      "disk": {
                        "measurement": [
                          "used_percent",
                          "inodes_free"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": ["*"]
                      },
                      "diskio": {
                        "measurement": [
                          "io_time",
                          "write_bytes",
                          "read_bytes",
                          "writes",
                          "reads"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": ["*"]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "netstat": {
                        "measurement": [
                          "tcp_established",
                          "tcp_time_wait"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "statsd": {
                        "metrics_aggregation_interval": 60,
                        "metrics_collection_interval": 10,
                        "service_address": ":8125"
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        02_restart-amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
    Properties:
      SecurityGroups:
      - Ref: WebServerSG
      InstanceType:
        Ref: InstanceType
      ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region' , !FindInMap [ AWSInstanceType2Arch, !Ref InstanceType, Arch ] ]
      IamInstanceProfile:
        Ref: WebServerInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          service httpd start
          chkconfig httpd on
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html
          yum -y install collectd
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource WebServerLaunchConfiguration --region ${AWS::Region} --configsets default

  WebLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: '15'
      HealthCheckPath: "/"
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '2'
      HealthyThresholdCount: '2'
      Matcher:
        HttpCode: '200'
      Port: '80'
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: '2'
      VpcId:
        Ref: VPC
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: WebELBSG
      Subnets:
      - Ref: IGWSubnet1
      - Ref: IGWSubnet2
      Type: application
  WebLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: WebLoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
      - TargetGroupArn:
          Ref: WebLoadBalancerTargetGroup
        Type: forward
  WebServerAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - Fn::Select:
          - 0
          - Fn::GetAZs: ""
      - Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MinSize: '2'
      MaxSize: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: '60'
      Cooldown: '60'
      MetricsCollection:
      - Granularity: '1Minute'
      LaunchConfigurationName:
        Ref: WebServerLaunchConfiguration
      VPCZoneIdentifier:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      TargetGroupARNs:
      - Ref: WebLoadBalancerTargetGroup
      Tags:
      - Key: Name
        Value: !Sub 'WebServerforResiliency-${VPC}'
        PropagateAtLaunch: 'true'
  CanaryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  CanaryExecutionPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CanaryExecutionPolicy
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetBucketLocation
              Resource:
                - !Sub arn:aws:s3:::${CanaryResultS3Bucket}/*
                - !Sub arn:aws:s3:::${CanaryResultS3Bucket}
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
            - Effect: Allow
              Action:
                - s3:ListAllMyBuckets
                - xray:PutTraceSegments
              Resource: "*"
            - Effect: Allow
              Action: cloudwatch:PutMetricData
              Resource: "*"
              Condition:
                StringEquals: { "cloudwatch:namespace": "CloudWatchSynthetics"}
      Roles:
        - !Ref CanaryExecutionRole
  CanaryResultS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub digito-asg-canary-results-${AWS::Region}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  WebServerSyntheticCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      ArtifactS3Location: !Sub s3://${CanaryResultS3Bucket}
      Code:
        Handler: exports.handler
        Script: !Sub
          - |
              const URL = require('url');
              const synthetics = require('Synthetics');
              const log = require('SyntheticsLogger');
              const syntheticsConfiguration = synthetics.getConfiguration();

              const loadBlueprint = async function () {

                  const urls = ['http://${TargetURL}'];

                  // Set screenshot option
                  const takeScreenshot = false;

                  /* Disabling default step screen shots taken during Synthetics.executeStep() calls
                   * Step will be used to publish metrics on time taken to load dom content but
                   * Screenshots will be taken outside the executeStep to allow for page to completely load with domcontentloaded
                   * You can change it to load, networkidle0, networkidle2 depending on what works best for you.
                   */
                  syntheticsConfiguration.disableStepScreenshots();
                  syntheticsConfiguration.setConfig({
                     continueOnStepFailure: true
                  });

                  let page = await synthetics.getPage();

                  for (const url of urls) {
                      await loadUrl(page, url, takeScreenshot);
                  }
              };

              // Reset the page in-between
              const resetPage = async function(page) {
                  try {
                      await page.goto('about:blank',{waitUntil: ['load', 'networkidle0'], timeout: 30000} );
                  } catch(ex) {
                      synthetics.addExecutionError('Unable to open a blank page ', ex);
                  }
              }

              const loadUrl = async function (page, url, takeScreenshot) {
                  let stepName = null;
                  let domcontentloaded = false;

                  try {
                      stepName = URL.parse(url).hostname;
                  } catch (error) {
                      const errorString = `Error parsing url: ${!url}.  ${!error}`;
                      log.error(errorString);
                      /* If we fail to parse the URL, don't emit a metric with a stepName based on it.
                         It may not be a legal CloudWatch metric dimension name and we may not have an alarms
                         setup on the malformed URL stepName.  Instead, fail this step which will
                         show up in the logs and will fail the overall canary and alarm on the overall canary
                         success rate.
                      */
                      throw error;
                  }

                  await synthetics.executeStep(stepName, async function () {

                      /* You can customize the wait condition here. For instance, using 'networkidle2' or 'networkidle0' to load page completely.
                         networkidle0: Navigation is successful when the page has had no network requests for half a second. This might never happen if page is constantly loading multiple resources.
                         networkidle2: Navigation is successful when the page has no more then 2 network requests for half a second.
                         domcontentloaded: It's fired as soon as the page DOM has been loaded, without waiting for resources to finish loading. Can be used and then add explicit await page.waitFor(timeInMs)
                      */
                      const response = await page.goto(url, { waitUntil: ['domcontentloaded'], timeout: 30000});
                      if (response) {
                          domcontentloaded = true;
                          const status = response.status();
                          const statusText = response.statusText();

                          const logResponseString = `Response from url: ${!url}  Status: ${!status}  Status Text: ${!statusText}`;

                          //If the response status code is not a 2xx success code
                          if (response.status() < 200 || response.status() > 299) {
                              throw `Failed to load url: ${!url} ${!response.status()} ${!response.statusText()}`;
                          }
                      } else {
                          const logNoResponseString = `No response returned for url: ${!url}`;
                          log.error(logNoResponseString);
                          throw new Error(logNoResponseString);
                      }
                  });

                  // Wait for 15 seconds to let page load fully before taking screenshot.
                  if (domcontentloaded && takeScreenshot) {
                      await page.waitFor(15000);
                      await synthetics.takeScreenshot(stepName, 'loaded');
                      await resetPage(page);
                  }
              };

              exports.handler = async () => {
                  return await loadBlueprint();
              };
          - TargetURL: !GetAtt WebLoadBalancer.DNSName
      FailureRetentionPeriod: 5
      ExecutionRoleArn: !GetAtt CanaryExecutionRole.Arn
      Name: asg_cfn_canary
      RuntimeVersion: syn-nodejs-puppeteer-3.1
      Schedule:
        Expression: rate(1 minute)
      StartCanaryAfterCreation: True
  InServiceCapacityLessThanThresholdAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '2'
      AlarmDescription: Alarm if in service capacity less than 2
      Period: '60'
      Namespace: AWS/AutoScaling
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerAutoscalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: GroupInServiceCapacity
  AsgCpuUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Unit: Percent
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      AlarmDescription: Alarm if any ASG instance CPU utilization is above or equal to 70%
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: breaching
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerAutoscalingGroup
  UnHealthyHostCountAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription:
        Fn::Join: [ '', [ 'Alarm by Digito that reports when unhealthy host count is over 1' ] ]
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt WebLoadBalancerTargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt WebLoadBalancer.LoadBalancerFullName
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Maximum
      Threshold: 1
      TreatMissingData: missing
Outputs:
  CanaryName:
    Description: The expected output of Canary Metrics
    Value: !Ref WebServerSyntheticCanary
  SyntheticAlarm:
    Description: Synthetic Alarm Name
    Value: !Ref UnHealthyHostCountAlarm
  AsgCpuUtilizationAlarmName:
    Description: Asg Cpu Utilization Alarm Name
    Value: !Ref AsgCpuUtilizationAlarm
  UnHealthyHostCountAlarm:
    Description: UnHealthy Hosts Count Alarm Name
    Value: !Ref UnHealthyHostCountAlarm
  AutoScalingGroupName:
    Description: AutoScalingGroupName
    Value: !Ref WebServerAutoscalingGroup
  WebSiteURL:
    Description: URL of ELB
    Value: !Sub
      - http://${TargetURL}
      - TargetURL: !GetAtt WebLoadBalancer.DNSName
  LoadBalancer:
    Description: AutoScalingGroup LoadBalancer
    Value: !GetAtt WebLoadBalancer.LoadBalancerFullName
  LoadBalancerTargetGroup:
    Description: AutoScalingGroup LoadBalancer TargetGroup
    Value: !GetAtt WebLoadBalancerTargetGroup.TargetGroupFullName
