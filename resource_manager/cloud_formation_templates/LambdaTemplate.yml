#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: Test stack for Lambda and related resources. Contains all alarms
Outputs:  
  LambdaFunction:
    Description: Lambda function name
    Value: !Ref LambdaFunction
  LambdaARN:
    Description: Lambda ARN
    Value: !GetAtt LambdaFunction.Arn
  LambdaVersion:
    Description: Lambda Version Qualifier
    Value: !GetAtt LambdaVersion.Version
  LambdaSecurityGroup:
    Description: Lambda Security Group
    Value: !Ref LambdaSecurityGroup
  S3Bucket:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
  ThrottlesAlarm:
    Description: Alarm
    Value: !Ref  ThrottlesAlarm
  ErrorsAlarm:
    Description: Alarm
    Value: !Ref  ErrorsAlarm
  MemorySoftLimitAlarm:
    Description: Alarm
    Value: !Ref  MemorySoftLimitAlarm
  ConcurrentExecutionsAlarm:
    Description: Alarm
    Value: !Ref  ConcurrentExecutionsAlarm
  AverageMemoryGrowthAlarm:
    Description: Alarm
    Value: !Ref  AverageMemoryGrowthAlarm
  DurationAlarm:
    Description: Alarm
    Value: !Ref  DurationAlarm
  InvocationsAlarm:
    Description: Alarm
    Value: !Ref  InvocationsAlarm
Parameters:
  MemorySoftLimit:
    Type: Number
    Description: The limit of RAM for Lambda in MBs
    Default: 2000
  LambdaLevelConcurrencyQuotaMinus10Percents:
    Type: Number
    Description: LambdaLevelConcurrencyQuota - 10%
    Default: 90
  AverageMemoryThreshold:
    Type: Number
    Description: AverageMemory * 0.05 per 1 minute
    Default: 0.25
  AverageDurationThreshold:
    Type: Number
    Description: AverageDuration * 0.05 per 1 minute
    Default: 120
  AverageInvocationsThreshold:
    Type: Number
    Description: AverageInvocations * 0.05 per 1 minute
    Default: 50
  VPCCidr:
    Type: String
    Description: VPC cidr block
    Default: 10.0.0.0/16
  LambdaCode:
    Type: String
    Description: Code to upload to Lambda
    Default: >
      def handler(event, context):
        print('my happy lambda rino')
Mappings:
  AWSRegionLambdaInsightsLayerArn:
    us-east-1:
      LayerARN: arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14
    us-east-2:
      LayerARN: arn:aws:lambda:us-east-2:580247275435:layer:LambdaInsightsExtension:14
    us-west-2:
      LayerARN: arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:14
    us-west-1:
      LayerARN: arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension:14 
    eu-west-1:
      LayerARN: arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension:14    
    eu-west-2:
      LayerARN: arn:aws:lambda:eu-west-2:580247275435:layer:LambdaInsightsExtension:14
    eu-west-3:
      LayerARN: arn:aws:lambda:eu-west-3:580247275435:layer:LambdaInsightsExtension:14
    eu-south-1:
      LayerARN: arn:aws:lambda:eu-south-1:339249233099:layer:LambdaInsightsExtension:8
    eu-central-1:
      LayerARN: arn:aws:lambda:eu-central-1:580247275435:layer:LambdaInsightsExtension:14
    eu-north-1:
      LayerARN: arn:aws:lambda:eu-north-1:580247275435:layer:LambdaInsightsExtension:14
    ap-east-1:
      LayerARN: arn:aws:lambda:ap-east-1:519774774795:layer:LambdaInsightsExtension:8
    ap-northeast-1:
      LayerARN: arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension:14
    ap-northeast-2:
      LayerARN: arn:aws:lambda:ap-northeast-2:580247275435:layer:LambdaInsightsExtension:14
    me-south-1:
      LayerARN: arn:aws:lambda:me-south-1:285320876703:layer:LambdaInsightsExtension:8
    ap-southeast-1:
      LayerARN: arn:aws:lambda:ap-southeast-1:580247275435:layer:LambdaInsightsExtension:14
    ap-southeast-2:
      LayerARN: arn:aws:lambda:ap-southeast-2:580247275435:layer:LambdaInsightsExtension:14
    ap-south-1:
      LayerARN: arn:aws:lambda:ap-south-1:580247275435:layer:LambdaInsightsExtension:14
    af-south-1:
      LayerARN: arn:aws:lambda:af-south-1:012438385374:layer:LambdaInsightsExtension:8
    ca-central-1:
      LayerARN: arn:aws:lambda:ca-central-1:580247275435:layer:LambdaInsightsExtension:14
    sa-east-1:
      LayerARN: arn:aws:lambda:sa-east-1:580247275435:layer:LambdaInsightsExtension:14
    cn-north-1:
      LayerARN: arn:aws-cn:lambda:cn-north-1:488211338238:layer:LambdaInsightsExtension:8
    cn-northwest-1:
      LayerARN: arn:aws-cn:lambda:cn-northwest-1:488211338238:layer:LambdaInsightsExtension:8
Resources:
  LambdaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: LambdaVPC

  LambdaPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LambdaVPC
      CidrBlock: !Select
        - 0
        - !Cidr
          - !Ref VPCCidr
          - 2
          - 8
      Tags:
        - Key: Name
          Value: LambdaPublicSubnet

  LambdaPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LambdaVPC
      CidrBlock: !Select
        - 1
        - !Cidr
          - !Ref VPCCidr
          - 2
          - 8
      Tags:
        - Key: Name
          Value: LambdaPrivateSubnet

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound everyting.
      VpcId: !Ref LambdaVPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LambdaSecurityGroup

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref LambdaPublicSubnet
      Tags:
        - Key: Name
          Value: LambdaNatGateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LambdaVPCInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: LambdaVPC
      InternetGatewayId:
        Ref: InternetGateway

  IGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: LambdaVPC
      Tags:
        - Key: Name
          Value: LambdaVPC-IGWRoute

  NATRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: LambdaVPC
      Tags:
        - Key: Name
          Value: LambdaVPC-NATRoute

  IGWPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: IGWRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  NATPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NATRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  IGWSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: LambdaPublicSubnet
      RouteTableId:
        Ref: IGWRouteTable

  NATSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: LambdaPrivateSubnet
      RouteTableId:
        Ref: NATRouteTable

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: RunEveryMinute
      Name: !Join
        - "-"
        - - "RunEveryMinute"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - LambdaFunction
            - Arn
          Id: !Ref LambdaFunction
          Input: !Join
            - ""
            - - '{"bucket_name": "'
              - !Ref S3Bucket
              - '"}'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Layers:
        - !FindInMap ['AWSRegionLambdaInsightsLayerArn', !Ref 'AWS::Region', 'LayerARN']
      Code:
        ZipFile: !Ref LambdaCode
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          LAMBDA_INSIGHTS_LOG_LEVEL: info
      Timeout: 60
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaPrivateSubnet

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventRule.Arn

  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: v1
  LambdaActualAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version
      Name: actual

  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DigitoLambdaBreakSecurityGroupAssumePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DetachNetworkInterface
              - ec2:DeleteNetworkInterface
          - Effect: Allow
            Resource: !GetAtt S3Bucket.Arn
            Action:
              - s3:ListBucket
      Roles:
        - Ref: LambdaRole
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lambda Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole     
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Join
        - "-"
        - - "s3-lambda-tests-bucket"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AccessControl: Private
  ThrottlesAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "lambda:alarm:health-throttles:2020-04-01"
      ActionsEnabled: false
      MetricName: "Throttles"
      Namespace: "AWS/Lambda"
      Statistic: "Maximum"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref LambdaFunction
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 0
      ComparisonOperator: "GreaterThanThreshold"
      TreatMissingData: "notBreaching"
  ErrorsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "lambda:alarm:health-errors:2020-04-01"
      ActionsEnabled: false
      MetricName: "Errors"
      Namespace: "AWS/Lambda"
      Statistic: "Maximum"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref LambdaFunction
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 0
      ComparisonOperator: "GreaterThanThreshold"
      TreatMissingData: "missing"
  MemorySoftLimitAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "lambda:alarm:health-memory_soft_limit:2020-04-01"
      ActionsEnabled: false
      MetricName: "used_memory_max"
      Namespace: "LambdaInsights"
      Statistic: "Maximum"
      Dimensions:
        - Name: "function_name"
          Value: !Ref LambdaFunction
      Period: 180
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref MemorySoftLimit
      ComparisonOperator: "GreaterThanThreshold"
      TreatMissingData: "missing"
  ConcurrentExecutionsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "lambda:alarm:health-concurrent_executions:2020-04-01"
      ActionsEnabled: false
      MetricName: "ConcurrentExecutions"
      Namespace: "AWS/Lambda"
      Statistic: "Average"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref LambdaFunction
      Period: 60
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      Threshold: !Ref LambdaLevelConcurrencyQuotaMinus10Percents
      ComparisonOperator: "GreaterThanThreshold"
      TreatMissingData: "missing"
  AverageMemoryGrowthAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: false
      AlarmDescription: "lambda:alarm:health-memory_deviation:2020-04-01"
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: "LessThanLowerOrGreaterThanUpperThreshold"
      TreatMissingData: "missing"
      Metrics:
        - Id: "m1"
          MetricStat:
            Metric:
              Namespace: "LambdaInsights"
              MetricName: "memory_utilization"
              Dimensions:
                - Name: "function_name"
                  Value: !Ref LambdaFunction
            Period: 180
            Stat: "Average"
          ReturnData: true
        - Id: "ad1"
          Expression:
            !Join [
            "",
              [
                "ANOMALY_DETECTION_BAND(m1, ",
                !Ref AverageMemoryThreshold,
                ")",
              ],
            ]
          Label: "Duration (expected)"
          ReturnData: true
      ThresholdMetricId: "ad1"
  DurationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: false
      AlarmDescription: "lambda:alarm:health-duration:2020-04-01"
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      ComparisonOperator: "LessThanLowerOrGreaterThanUpperThreshold"
      TreatMissingData: "missing"
      Metrics:
        - Id: "m1"
          MetricStat:
            Metric:
              Namespace: "AWS/Lambda"
              MetricName: "Duration"
              Dimensions:
                - Name: "FunctionName"
                  Value: !Ref LambdaFunction
            Period: 180
            Stat: "Average"
          ReturnData: true
        - Id: "ad1"
          Expression:
            !Join [
            "",
              [
                "ANOMALY_DETECTION_BAND(m1, ",
                !Ref AverageDurationThreshold,
                ")",
              ],
            ]
          Label: "Duration (expected)"
          ReturnData: true
      ThresholdMetricId: "ad1"
  InvocationsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: false
      AlarmDescription: "lambda:alarm:health-invocations:2020-04-01"
      EvaluationPeriods: 5
      DatapointsToAlarm: 3
      ComparisonOperator: "LessThanLowerOrGreaterThanUpperThreshold"
      TreatMissingData: "missing"
      Metrics:
        - Id: "m1"
          MetricStat:
            Metric:
              Namespace: "AWS/Lambda"
              MetricName: "Invocations"
              Dimensions:
                - Name: "FunctionName"
                  Value: !Ref LambdaFunction
            Period: 60
            Stat: "Average"
          ReturnData: true
        - Id: "ad1"
          Expression:
            !Join [
            "",
              [
                "ANOMALY_DETECTION_BAND(m1, ",
                !Ref AverageInvocationsThreshold,
                ")",
              ],
            ]
          Label: "Invocations (expected)"
          ReturnData: true
      ThresholdMetricId: "ad1"
