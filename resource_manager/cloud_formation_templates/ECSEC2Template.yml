#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications onto a cluster of EC2
             hosts using Elastic Container Service. This stack runs containers on
             hosts that are in a public VPC subnet, and includes a public facing load
             balancer to register the services in.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
  ECSService:
    Condition: NotGPU
    Description: The arn of ecs service
    Value: !Ref 'ECSService'
  ServiceName:
    Condition: NotGPU
    Description: The name of ecs service
    Value: !GetAtt 'ECSService.Name'
  ECSGPUService:
    Condition: GPU
    Description: The arn of ecs service
    Value: !Ref 'ECSGPUService'
  GPUServiceName:
    Condition: GPU
    Description: The name of ecs service
    Value: !GetAtt 'ECSGPUService.Name'
  ECSTaskDefinition:
    Condition: NotGPU
    Description: A task definition ARN
    Value: !Ref 'ECSTaskDefinition'
  ECSGPUTaskDefifnition:
    Condition: GPU
    Description: A task definition ARN
    Value: !Ref 'ECSGPUTaskDefinition'
  EcsHostSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref 'EcsHostSecurityGroup'
Parameters:
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '6'
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, t3.medium, m3.medium, m3.large,
                    m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
                    c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
                    c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
                    r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, g3s.xlarge]
    ConstraintDescription: Please choose a valid instance type.
  IsGPUTask:
    Description: Set to true when need to create task with GPU
    Type: String
    Default: false
  VPC:
    Description: VPC id
    Type: String
  PublicSubnetOne:
    Description: first PublicSubnet id
    Type: String
  PublicSubnetTwo:
    Description: second PublicSubnet id
    Type: String
Conditions:
  GPU: !Equals
    - !Ref IsGPUTask
    - true
  NotGPU: !Not
    - !Equals
      - !Ref IsGPUTask
      - true
Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VPC'

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other hosts in the same security group
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'EcsHostSecurityGroup'

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'EcsHostSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                Resource: !Join
                  - ':'
                  - - !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup"
                    - !Ref ECSAutoScalingGroup
              - Effect: Allow
                Action:
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                Resource: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: !Join
                  - '/'
                  - - !GetAtt ECSCluster.Arn
                    - '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: NotGPU
    Properties:
      ContainerDefinitions:
        - Name: !Join
            - "-"
            - - "TaskDef"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          Image: "amazon/amazon-ecs-sample"
          Cpu: 256
          EntryPoint:
            - "/usr/sbin/apache2"
            - "-D"
            - "FOREGROUND"
          Memory: 512
          Essential: true

  ECSService:
    Type: AWS::ECS::Service
    Condition: NotGPU
    Properties:
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinition"

  ECSGPUTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: GPU
    Properties:
      ContainerDefinitions:
        - Name: !Join
            - "-"
            - - "TaskDef"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          Image: "amazon/amazon-ecs-sample"
          Cpu: 256
          ResourceRequirements:
            - Type: "GPU"
              Value: "1"
          EntryPoint:
            - "/usr/sbin/apache2"
            - "-D"
            - "FOREGROUND"
          Memory: 512
          Essential: true

  ECSGPUService:
    Type: AWS::ECS::Service
    Condition: GPU
    Properties:
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSGPUTaskDefinition"
