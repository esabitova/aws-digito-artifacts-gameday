#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: "Sample KinesisDataAnalytics via CloudFormation"
Outputs:
  KinesisAnalyticsApplicationPhysicalResourceId:
    Description: Export application ApplicationPhysicalResourceId for outward reference
    Value: !Ref KinesisAnalyticsApp
  InputKinesisAnalyticsStreamName:
    Description: Name of input stream, to populate with stream data
    Value: !Ref InputKinesisStream
  OutputKinesisAnalyticsStreamName:
    Description: Name of output stream, to extract processed stream data
    Value: !Ref OutputKinesisStream
Parameters:
  KmsKey:
    Type: String
    Description: KMS encryption Key Arn
    Default: ""
Resources:
  DynamoDBOutputTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "HOTSPOT_RESULT"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "HOTSPOT_RESULT"
          KeyType: "HASH"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        KMSMasterKeyId: !Sub '${KmsKey}'
        SSEEnabled: true
        SSEType: KMS
  OutputLambdaProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          """fanout.py reads from kinesis data analytic output and fans out to DynamoDB"""            
          import base64
          import json
          import os
          from os import getenv
          from datetime import datetime
          import boto3
          ddb = boto3.resource("dynamodb")
          def handler(event, context):
            for record in event['records']:
              payload = base64.b64decode(record["data"])
              data = payload.decode().replace('"','')
              dynamodb_table_name = getenv('DbName')
              table = ddb.Table(dynamodb_table_name)
              item = {
                "HOTSPOT_RESULT": data
              }
              table.put_item(
                Item=item,
                ConditionExpression="attribute_not_exists(inspectedAt)")
            return {"statusCode": 200, "body": json.dumps(item)}            
      Description: Dummy OutputStream processing lambda function
      Handler: index.handler
      Role: !GetAtt 'OutputProcessingLambdaRole.Arn'
      Environment:
        Variables:
          DbArn:
            !GetAtt DynamoDBOutputTable.Arn
          DbName:
            !Ref DynamoDBOutputTable
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 10  
  InputStreamLambdaProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import base64
          import json
          def handler(event, context):
            output = []
            for record in event['records']:
              payload=base64.b64decode(record["data"])
              responseValue = json.loads(payload.decode())
              prepareValue = responseValue.copy()
              prepareValue['x'] = responseValue['y']
              prepareValue['y'] = responseValue['x']
              putbackValue = json.dumps(prepareValue)[:75]              
              output_record = {
                'recordId': record['recordId'],
                'result': 'Ok',
                'data': base64.b64encode(putbackValue.encode('utf-8'))
              }
              output.append(output_record)
            return {'records': output}
      Description: Dummy InputStream processing lambda function
      Handler: index.handler
      Role: !GetAtt 'InputProcessingLambdaRole.Arn'
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 10
  KinesisAnalyticsApp:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationDescription: Kinesis Data Analytics for SQL Application
      ApplicationCode: !Sub |
            CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM" (
              "x" DOUBLE, 
              "y" DOUBLE, 
              "is_hot" VARCHAR(4),
              HOTSPOTS_RESULT VARCHAR(10000)
            ); 
            CREATE OR REPLACE PUMP "STREAM_PUMP" AS 
                INSERT INTO "DESTINATION_SQL_STREAM" 
                SELECT "x", "y", "is_hot", "HOTSPOTS_RESULT" 
                FROM TABLE (
                    HOTSPOTS(   
                        CURSOR(SELECT STREAM "x", "y", "is_hot" FROM "DEMO_SOURCE_SQL_STREAM_001"), 
                        1000, 
                        0.2, 
                        17)
            );
      Inputs:
        - NamePrefix: "DEMO_SOURCE_SQL_STREAM"
          InputProcessingConfiguration:
            InputLambdaProcessor:
              ResourceARN: !Join [":", [!GetAtt InputStreamLambdaProcessor.Arn, "$LATEST"]]
              RoleARN: !GetAtt KinesisAnalyticsRole.Arn
          InputSchema:
            RecordColumns:
              - Name: "x"
                SqlType: "DOUBLE"
                Mapping: "$.x"
              - Name: "y"
                SqlType: "DOUBLE"
                Mapping: "$.y"
              - Name: "is_hot"
                SqlType: "VARCHAR(4)"
                Mapping: "$.is_hot"  
            RecordFormat:
              RecordFormatType: "JSON"
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordEncoding: "UTF-8"
          KinesisStreamsInput:
            ResourceARN: !GetAtt InputKinesisStream.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn  
  InputProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lambda Role
      Policies:
        - PolicyName: !Join
            - "-"
            - - "policy-digito-lambda-access-kinesis-application"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: getkinanaccess
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:ListShards
                  - kinesis:DescribeStreamSummary
                  - kinesis:DescribeStreamConsumer
                  - kinesis:SubscribeToShard
                  - kinesis:RegisterStreamConsumer
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - kinesis:ListStreams
                Resource: !GetAtt 'InputKinesisStream.Arn' 
              - Sid: cwatch
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:DescribeLogStreams
                  - logs:PutDestination
                Resource: "*"
              - Sid: usekmskeybyinputlambda
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Sub '${KmsKey}'
  OutputProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lambda Role
      Policies:
        - PolicyName: !Join
            - "-"
            - - "policy-digito-output-stream-process-lambda"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: getkinanaccess
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:ListShards
                  - kinesis:DescribeStreamSummary
                  - kinesis:DescribeStreamConsumer
                  - kinesis:SubscribeToShard
                  - kinesis:RegisterStreamConsumer
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - kinesis:ListStreams                  
                Resource: !GetAtt 'OutputKinesisStream.Arn'
              - Sid: usekmskeybyoutputlambda
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Sub '${KmsKey}'
              - Sid: puttodynamodb
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !GetAtt 'DynamoDBOutputTable.Arn'
              - Sid: cwatchoutput
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:DescribeLogStreams
                  - logs:PutDestination
                Resource: "*"
  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Join
            - "-"
            - - "policy-digito-kinesis-application-access-stream"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:             
              - Sid: KinesisAnalyticsStream
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:ListShards
                  - kinesis:DescribeStreamSummary
                  - kinesis:DescribeStreamConsumer
                  - kinesis:SubscribeToShard
                  - kinesis:RegisterStreamConsumer
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - kinesis:ListStreams                
                Resource:
                  - !GetAtt 'InputKinesisStream.Arn'
                  - !GetAtt 'OutputKinesisStream.Arn'
              - Sid: lambdainp
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                  - lambda:GetFunctionConfiguration    
                Resource:
                  - !Join [":", [!GetAtt 'InputStreamLambdaProcessor.Arn', "$LATEST"]]
                  - !GetAtt 'OutputLambdaProcessor.Arn'
                  - !Join [":", [!GetAtt 'OutputLambdaProcessor.Arn', "$LATEST"]]
              - Sid: kinesisdataanalyticsapp
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Sub '${KmsKey}'
  KinesisAnalyticsOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref KinesisAnalyticsApp
      Output:
        Name: "DESTINATION_SQL_STREAM"
        DestinationSchema:
          RecordFormatType: "JSON"
        LambdaOutput: 
          ResourceARN: !Join [":", [!GetAtt OutputLambdaProcessor.Arn, "$LATEST"]]
          RoleARN: !GetAtt KinesisAnalyticsRole.Arn          
  InputKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !Sub '${KmsKey}'
  OutputKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !Sub '${KmsKey}'
 