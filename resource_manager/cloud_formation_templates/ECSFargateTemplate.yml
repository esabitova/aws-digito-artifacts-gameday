#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications in AWS Fargate.
             This stack runs containers in a public VPC subnet, and includes a
             public facing load balancer to register the services in.
Parameters:
  VPC:
    Description: VPC id
    Type: String
  PublicSubnetOne:
    Description: first PublicSubnet id
    Type: String
  PublicSubnetTwo:
    Description: second PublicSubnet id
    Type: String
  ServiceDesiredCount:
    Description: amount of tasks running in service
    Type: Number
    Default: 1
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
  ServiceName:
    Description: The name of ecs service
    Value: !GetAtt 'ECSService.Name'
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
  ECSService:
    Description: The name of ecs service
    Value: !Ref 'ECSService'
  ECSTaskDefinition:
    Description: A task definition ARN
    Value: !Ref 'ECSTaskDefinition'
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
  ECSFargateTaskAmountAlarm:
    Description: An alarm for a task amount
    Value: !Ref 'ECSFargateTaskAmountAlarm'
Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:*"

  ECSFargateTaskAmountAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Alarm checking that amount of running tasks in service is less that threshold"
      ActionsEnabled: false
      Metrics:
        - Expression: !Join
            - " "
            - - "IF(m1 <"
              - !Ref ServiceDesiredCount
              - "OR m1 >"
              - !Ref ServiceDesiredCount
              - ", 1, 0)"
          Id: e1
          Label: 'Amount of tasks equals Threshold'
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: MemoryUtilization
              Namespace: AWS/ECS
              Dimensions:
                - Name: ServiceName
                  Value: !GetAtt ECSService.Name
                - Name: ClusterName
                  Value: !Ref ECSCluster
            Period: 60
            Stat: SampleCount
      Threshold: 0
      TreatMissingData: notBreaching
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanThreshold

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      NetworkMode: awsvpc
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: !Join
            - "-"
            - - "TaskDef"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          Image: "amazon/amazon-ecs-sample"
          Cpu: 256
          EntryPoint:
            - "/usr/sbin/apache2"
            - "-D"
            - "FOREGROUND"
          Memory: 512
          Essential: true

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: "ECSCluster"
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
          AssignPublicIp: ENABLED
      DesiredCount: !Ref ServiceDesiredCount
      TaskDefinition:
        Ref: "ECSTaskDefinition"
