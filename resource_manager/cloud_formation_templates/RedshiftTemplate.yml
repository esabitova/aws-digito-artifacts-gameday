#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Description: Test cluster for Redshift
Outputs:
  DatabaseName:
    Description: Database name
    Value: !Join
      - "-"
      - - "digito-redshift-db"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
  SchemaName:
    Description: Schema name
    Value: !Join
      - "-"
      - - "schema"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
  LambdaArn:
    Description: arn of lambda function
    Value: !GetAtt LambdaFunction.Arn
  LambdaRedshiftPerformanceArn:
    Description: arn of lambda function
    Value: !GetAtt LambdaRedshiftPerformance.Arn
  ClusterEndpoint:
    Description: Cluster endpoint
    Value: !Sub "${RedshiftCluster.Endpoint.Address}:${RedshiftCluster.Endpoint.Port}"
  ClusterName:
    Description: Name of cluster
    Value:
      Ref: RedshiftCluster
  ParameterGroupName:
    Description: Name of parameter group
    Value:
      Ref: RedshiftClusterParameterGroup
  RedshiftClusterSubnetGroupName:
    Description: Name of cluster subnet group
    Value:
      Ref: RedshiftClusterSubnetGroup
  RedshiftClusterSecurityGroupName:
    Description: Name of cluster security group
    Value:
      Ref: SecurityGroup
  RedshiftMasterUsername:
    Description: Master username from secretsmanager.
    Value: !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::username}}'
  RedshiftMasterPassword:
    Description: Random generated password from secretsmanager.
    Value: !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::password}}'
Parameters:
  KmsKey:
    Description: KMS key
    Type: String
    AllowedPattern: 'arn:aws:kms:\S+:\d+:key\/\S+'
  VPC:
    Description: VPC id
    Type: String
  PublicSubnetOne:
    Description: first PublicSubnet id
    Type: String
  PublicSubnetTwo:
    Description: second PublicSubnet id
    Type: String
  PublicSubnet1Cidr:
    Description: first PublicSubnet CIDR
    Type: String
  PublicSubnet2Cidr:
    Description: second PublicSubnet CIDR
    Type: String
  ClusterType:
    Description: The type of cluster
    Type: String
    Default: multi-node
    AllowedValues:
    - single-node
    - multi-node
  NumberOfNodes:
    Description: The number of compute nodes in the cluster. For multi-node clusters,
      the NumberOfNodes parameter must be greater than 1
    Type: Number
    Default: '2'
  NodeType:
    Description: The type of node to be provisioned
    Type: String
    Default: dc2.large
    AllowedValues:
    - dc2.large
    - ra3.xlplus
  PortNumber:
    Description: The port number on which the cluster accepts incoming connections.
    Type: Number
    Default: '5439'
  RedshiftPerformanceLambdaPackageS3Bucket:
    Type: String
    Description: S3 bucket for distribution package
  RedshiftPerformanceLambdaPackageS3Key:
    Type: String
    Description: S3 key for distribution package
  RedshiftPerformanceLambdaPackageS3BucketObjectVersion:
      Type: String
      Description: S3 object version for distribution package
      Default: ""
Conditions:
  IsMultiNodeCluster:
    Fn::Equals:
    - Ref: ClusterType
    - multi-node
  RedshiftPerformanceLambdaPackageS3BucketHasVersion: !Not
    - !Equals
      - !Ref RedshiftPerformanceLambdaPackageS3BucketObjectVersion
      - ""
  ConcurrencyScalingAvailable:
    Fn::Equals:
    - Ref: NodeType
    - ra3.xlplus
Resources:
  GeneratedSecretString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Generated Redshift cluster password
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: "\"@/\\'"
  RedshiftCluster:
    Type: "AWS::Redshift::Cluster"
    Properties:
      DBName: !Join
        - "-"
        - - "digito-redshift-db"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      MasterUsername: !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::password}}'
      NodeType: !Ref NodeType
      ClusterType: !Ref ClusterType
      Encrypted: true
      KmsKeyId: !Ref KmsKey
      NumberOfNodes:
        Fn::If:
        - IsMultiNodeCluster
        - Ref: NumberOfNodes
        - Ref: AWS::NoValue
      ClusterParameterGroupName: !Ref RedshiftClusterParameterGroup
      VpcSecurityGroupIds:
      - Ref: SecurityGroup
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      PubliclyAccessible: true
      Port: !Ref PortNumber
      Tags:
        - Key: Digito
          Value: AWS::Redshift::Cluster
  RedshiftClusterParameterGroup:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Redshift custer parameter group
      ParameterGroupFamily: redshift-1.0
      Parameters:
        - ParameterName: enable_user_activity_logging
          ParameterValue: 'true'
        - ParameterName: max_concurrency_scaling_clusters
          ParameterValue: '2'
        - ParameterName: wlm_json_configuration
          ParameterValue:
            Fn::If:
            - ConcurrencyScalingAvailable
            - "[ { \"user_group\": [ \"test_writers-*\" ], \"query_group\": [], \"name\": \"Queue 1\", \"memory_percent_to_use\": 1, \"query_concurrency\": 1, \"concurrency_scaling\": \"auto\", \"max_execution_time\": 30000, \"user_group_wild_card\": 1 }, { \"user_group\": [ \"test_writers2-*\" ], \"query_group\": [], \"name\": \"Queue 2\", \"memory_percent_to_use\": 1, \"query_concurrency\": 1, \"concurrency_scaling\": \"auto\", \"max_execution_time\": 29000, \"user_group_wild_card\": 1 }, { \"user_group\": [], \"query_group\": [], \"name\": \"Default queue\" }, { \"concurrency_scaling\": \"auto\", \"auto_wlm\": false }, { \"short_query_queue\": false } ]"
            - "[{ \"concurrency_scaling\": \"off\", \"auto_wlm\": true }]"
  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Redshift cluster subnet group
      SubnetIds:
        - Ref: PublicSubnetOne
        - Ref: PublicSubnetTwo
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      SecurityGroupIngress:
        - CidrIp:
            Ref: PublicSubnet1Cidr
          FromPort:
            Ref: PortNumber
          ToPort:
            Ref: PortNumber
          IpProtocol: tcp
        - CidrIp:
            Ref: PublicSubnet2Cidr
          FromPort:
            Ref: PortNumber
          ToPort:
            Ref: PortNumber
          IpProtocol: tcp
      VpcId:
        Ref: VPC
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      KmsKeyArn: !Ref KmsKey
      Code:
        ZipFile: >
          import json

          import os



          import boto3



          db = os.environ['REDSHIFT_DB']

          cluster_id = os.environ['REDSHIFT_CLUSTER_ID']

          db_user = os.environ['REDSHIFT_DB_USER']

          schema_name = os.environ['REDSHIFT_SCHEMA_NAME']

          def lambda_handler(event, context):
              client = boto3.client('redshift-data')
              sqls = [  f"""
                         create schema if not exists "{schema_name}" quota 2048;
                         """
                      ]
              responses = []
              for sql in sqls:

                  statement = client.execute_statement(
                      ClusterIdentifier=cluster_id,
                      Database=db,
                      DbUser=db_user,
                      # SecretArn='arn:aws:secretsmanager:af-south-1:435978235099:secret:GeneratedSecretString-FvQtH1guiTSk-2P6sBg',
                      Sql=sql
                      )
                  status = 'SUBMITTED'
                  while status != 'FINISHED':
                      response = client.describe_statement(Id=statement['Id'])
                      status = response['Status']
                  print(response)
                  responses.append(response['Status'])
              return {
                  'statusCode': 200,
                  'body': json.dumps({'responses': responses})
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          REDSHIFT_CLUSTER_ID: !Ref RedshiftCluster
          REDSHIFT_DB:  !Join
            - "-"
            - - "digito-redshift-db"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          REDSHIFT_SCHEMA_NAME: !Join
            - "-"
            - - "schema"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          REDSHIFT_DB_USER: !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::username}}'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lambda Role
  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DigitoLambdaBreakSecurityGroupAssumePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - redshift:GetClusterCredentials
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:redshift:*:*:dbname:"
                    - Fn::Join:
                        - "/"
                        - - !Ref RedshiftCluster
                          - !Join
                            - "-"
                            - - "digito-redshift-db"
                              - !Select
                                - 0
                                - !Split
                                  - "-"
                                  - !Select
                                    - 2
                                    - !Split
                                      - "/"
                                      - !Ref "AWS::StackId"
              - Fn::Join:
                  - ""
                  - - "arn:aws:redshift:*:*:dbuser:"
                    - Fn::Join:
                        - "/"
                        - - !Ref RedshiftCluster
                          - !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::username}}'
          - Effect: Allow
            Action:
              - redshift-data:*
            Resource: '*'
      Roles:
        - Ref: LambdaRole
  LambdaRedshiftPerformance:
    Type: AWS::Lambda::Function
    Properties:
      KmsKeyArn: !Ref KmsKey
      Code:
        S3Bucket:
          Ref: RedshiftPerformanceLambdaPackageS3Bucket
        S3Key:
          Ref: RedshiftPerformanceLambdaPackageS3Key
        S3ObjectVersion:
          Fn::If:
            - RedshiftPerformanceLambdaPackageS3BucketHasVersion
            - Ref: RedshiftPerformanceLambdaPackageS3BucketObjectVersion
            - Ref: AWS::NoValue
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRedshiftPerformanceRole.Arn
      Runtime: python3.7
      Timeout: 900
      # a lot of memory required because the scrip utilize big amount of threads
      # https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console
      # 5000Mb (3CPU) is not enough, 8000 - sometimes, and 10k works fine always
      MemorySize: 8900
      VpcConfig:
        SubnetIds:
          - !Ref PublicSubnetOne
          - !Ref PublicSubnetTwo
        SecurityGroupIds:
          - !Ref SecurityGroup
      Environment:
        Variables:
          REDSHIFT_CLUSTER_HOST: !Sub "${RedshiftCluster.Endpoint.Address}"
          REDSHIFT_DB:  !Join
            - "-"
            - - "digito-redshift-db"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          REDSHIFT_DB_USER: !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::username}}'
          REDSHIFT_DB_PASSWORD: !Sub '{{resolve:secretsmanager:${GeneratedSecretString}::password}}'
  LambdaRedshiftPerformanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Lambda Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole