---
AWSTemplateFormatVersion: '2010-09-09'
Description: Test stack for VPC and related resources.
Outputs:
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
  VPCCidr:
    Description: The CIDR of the VPC that this stack is deployed in
    Value: !GetAtt 'VPC.CidrBlock'
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
  PublicSubnet1Cidr:
    Description: Public subnet 1 CIDR
    Value: !FindInMap ['SubnetConfig', 'Public1', 'CIDR']
  PrivateSubnet1Cidr:
    Description: Private subnet 1 CIDR
    Value: !FindInMap ['SubnetConfig', 'PrivateNoInternet1', 'CIDR']
  PrivateSubnet2Cidr:
    Description: Private subnet 1 CIDR
    Value: !FindInMap ['SubnetConfig', 'PrivateNoInternet2', 'CIDR']
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
  PublicSubnet2Cidr:
    Description: Public subnet 1 CIDR
    Value: !FindInMap ['SubnetConfig', 'Public2', 'CIDR']
  PrivateSubnetWithoutInternetOne:
    Description: Private subnet w\o internet access
    Value: !Ref 'PrivateSubnetWithoutInternetOne'
  PrivateSubnetWithoutInternetTwo:
    Description: Private subnet w\o internet access
    Value: !Ref 'PrivateSubnetWithoutInternetTwo'
  PrivateSubnetWithoutInternetThree:
    Description: Private subnet w\o internet access
    Value: !Ref 'PrivateSubnetWithoutInternetThree'
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    Public1:
      CIDR: '10.0.0.0/24'
    Public2:
      CIDR: '10.0.1.0/24'
    PrivateNoInternet1:
      CIDR: '10.0.2.0/24'
    PrivateNoInternet2:
      CIDR: '10.0.3.0/24'
    PrivateNoInternet3:
      CIDR: '10.0.5.0/24'
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: SharedVPC
  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'Public1', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'Public2', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetWithoutInternetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateNoInternet1', 'CIDR']
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}

  PrivateSubnetWithoutInternetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateNoInternet2', 'CIDR']
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}

  PrivateSubnetWithoutInternetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateNoInternet3', 'CIDR']
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: {Ref: 'AWS::Region'}

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateSubnetWithoutInternetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetWithoutInternetOne
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetWithoutInternetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetWithoutInternetTwo
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetWithoutInternetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetWithoutInternetThree
      RouteTableId: !Ref PrivateRouteTable
