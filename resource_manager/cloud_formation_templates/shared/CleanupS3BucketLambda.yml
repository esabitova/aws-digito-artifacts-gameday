#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Description: Test stack for S3 and related resources. Contains all alarms
Outputs:
  CleanupS3BucketLambdaArn:
    Description: Cleanup S3 Bucket Lambda Function
    Value: !GetAtt CleanupS3BucketLambdaFunction.Arn
Resources:
  CleanupS3BucketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  CleanupS3BucketLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CleanupS3BucketLambdaPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource: "arn:aws:s3:::*"
            Action:
              - "s3:DeleteObjectVersion"
              - "s3:DeleteObject"
              - "s3:ListBucket"
              - "s3:ListBucketVersions"
              - "s3:GetBucketVersioning"
      Roles:
        - Ref: CleanupS3BucketLambdaRole

  LoggingS3BucketLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LoggingS3BucketLambdaPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:logs"
                  - !Ref "AWS::Region"
                  - !Ref "AWS::AccountId"
                  - "log-group:/aws/lambda/*"
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
      Roles:
        - Ref: CleanupS3BucketLambdaRole

  CleanupS3BucketLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 600
      Description: Invoke a function during stack creation.
      Runtime: python3.7
      Role: !GetAtt CleanupS3BucketLambdaRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import boto3
          import json
          from random import randint

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              bucket_names = event['ResourceProperties']['BucketNames']
              try:
                logger.info(event)
                s3 = boto3.resource('s3')
                if event['RequestType'] == 'Delete':
                  for bucket_name in bucket_names:
                      bucket = s3.Bucket(name=bucket_name)
                      logger.info(f'Cleaning [{bucket.name}] S3 bucket.')
                      if s3.BucketVersioning(bucket_name).status == 'Enabled':
                        bucket.object_versions.delete()
                      else:
                        bucket.objects.delete()
                  logger.info(f'S3 buckets {bucket_names} successfully cleaned.')
                send_response(event, context, bucket_names, cfnresponse.SUCCESS)
              except Exception as e:
                send_response(event, context, bucket_names, cfnresponse.FAILED)

          def send_response(event, context, bucket_names, response_status):
              physical_id = get_physical_id(event)
              response_data = {'Event': event}
              cfnresponse.send(event, context, response_status, response_data, physical_id)

          def get_physical_id(event):
              if event.get('PhysicalResourceId'):
                return event['PhysicalResourceId']
              return f'CustomResource-{random_with_N_digits(5)}'

          def random_with_N_digits(n):
              range_start = 10 ** (n - 1)
              range_end = (10 ** n) - 1
              return randint(range_start, range_end)
      TracingConfig:
        Mode: Active