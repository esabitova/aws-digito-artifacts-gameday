#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: Test stack for ApplicationELB and related resources. Contains all alarms
Outputs:
  ApplicationELB:
    Description: The Application Elastic Load Balancer
    Value: !Ref ApplicationELB
  ApplicationELBUrl:
    Description: The Application Elastic Load Balancer DNS Name
    Value: !GetAtt ApplicationELB.DNSName
  ApplicationELBFullName:
    Description: The Application Elastic Load Balancer Key For Alarm Setup
    Value: !GetAtt ApplicationELB.LoadBalancerFullName
  ProxyLambdaArn:
    Description: The ARN for Lambda function which is used to trigger requests to private ELB endpoint
    Value: !GetAtt ProxyLambdaFunction.Arn
  LambdaTargetFullName:
    Description: Target group full name
    Value: !GetAtt TargetGroupLambda.TargetGroupFullName
  UnhealthyTargetFullName:
    Description: Unhealthy target group full name
    Value: !GetAtt UnhealthyTargetGroupLambda.TargetGroupFullName
Parameters:
  VPCCidrBlock:
    Description: VPC CidrIp
    Type: String
    Default: 10.0.0.0/16
  IGWCidrBlock1:
    Description: IGW Routed Subnet CIDR for AZ 1, default Range 10.0.0.1 - 10.0.15.254
    Type: String
    Default: 10.0.0.0/20
  IGWCidrBlock2:
    Description: IGW Routed Subnet CIDR for AZ 2, default Range 10.0.16.1 - 10.0.31.254
    Type: String
    Default: 10.0.16.0/20

# alarms
Resources:
  VPC:
    Metadata:
      License: 'MIT No Attribution:  Permission is hereby granted, free of charge,
        to any person obtaining a copy of this software and associated documentation
        files (the "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish, distribute,
        sublicense, and/or sell copies of the Software, and to permit persons to whom
        the Software is furnished to do so.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
        WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
        WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
        ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
        DEALINGS IN THE SOFTWARE.'
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCidrBlock
      Tags:
      - Key: Name
        Value: ResiliencyVPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: ResiliencyVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  IGWSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock:
        Ref: IGWCidrBlock1
      Tags:
      - Key: Name
        Value: ResiliencyVPC-IGWSubnet1
  IGWSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock:
        Ref: IGWCidrBlock2
      Tags:
      - Key: Name
        Value: ResiliencyVPC-IGWSubnet2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref IGWSubnet1
  PublicSubnet1RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref IGWSubnet2
  ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: "security group for ALB"
          GroupName: "test-ALB-SG"
          VpcId: !Ref VPC
          SecurityGroupEgress:
            -
              CidrIp: "0.0.0.0/0"
              FromPort: 80
              ToPort: 80
              IpProtocol: "tcp"
          SecurityGroupIngress:
            -
              CidrIp: "0.0.0.0/0"
              FromPort: 80
              ToPort: 80
              IpProtocol: "tcp"
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Lambda"
      GroupDescription: "Lambda security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref IGWCidrBlock1
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref IGWCidrBlock1

  ApplicationELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: 'ipv4'
      Scheme: 'internal'
      Type: 'application'
      Subnets:
        - !Ref IGWSubnet1
        - !Ref IGWSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  HTTPListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref ApplicationELB
          Port: 80
          Protocol: "HTTP"
          DefaultActions:
            - Type: fixed-response
              FixedResponseConfig:
                ContentType: "text/plain"
                MessageBody: "OK"
                StatusCode: "200"

  ListenerRule503:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Response 503"
            StatusCode: "503"
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/response503*"
      ListenerArn: !Ref HTTPListener
      Priority: 1

  ListenerLambda:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupLambda
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/invoke_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 2

  ListenerLambdaUnhealthyResponse:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref UnhealthyTargetGroupLambda
                Weight: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/unhealthy_ping_invoke_lambda*"
      ListenerArn: !Ref HTTPListener
      Priority: 3

  AlwaysOKAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: false
      AlarmDescription: 'elb:alarm:always_ok:2021-03-24'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: AlwaysOK
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Minimum
      Threshold: 100
      TreatMissingData: notBreaching

  # Lambda resources
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 2
      VpcConfig:
        SubnetIds:
          - !Ref IGWSubnet1
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Environment:
        Variables:
          Host: 'test'
          Path: 'test_path'
      Code:
        ZipFile: >
          import logging

          log = logging.getLogger()

          log.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
              path = event['path'] if 'path' in event else 'response503'
              log.debug(f'Lambda function invocation')
              log.debug(f'Path: {path}')
              if path == '/unhealthy_ping_invoke_lambda':
                  return { "statusCode": 500 }
              elif path == '/invoke_lambda/trigger_error':
                  raise ValueError('Internal error trigger exception.')
              elif path == '/invoke_lambda/response503':
                  return {
                      "statusCode": 503,
                      "headers": {
                          "Content-Type": "text/plain"
                      },
                      "body": "Lambda Function Response 503"
                  }

  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: v1

  LambdaActualAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version
      Name: actual

  # Lambda resources
  ProxyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 2
      VpcConfig:
        SubnetIds:
          - !Ref IGWSubnet1
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Environment:
        Variables:
          Host: 'test'
          Path: 'test_path'
      Code:
        ZipFile: >
          import http.client

          import logging

          from socket import gethostbyname

          from time import sleep

          from os import getenv

          format = '[%(asctime)s] %(levelname)s %(message)s'

          logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")

          log = logging.getLogger()

          log.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
            host = event['host'] if 'host' in event else getenv('Host')
            path = event['path'] if 'path' in event else getenv('Path', '/')
            request_interval = event['request_interval'] if 'interval' in event else getenv('RequestInterval', 10)
            request_count = event['request_count'] if 'request_count' in event else getenv('RequestCount', 1)
            request_count = int(request_count)
            request_interval = int(request_interval)
            method = 'GET'

            log.debug(f'Ip: {gethostbyname(host)}, Host: {host}, Path: {path}, Method: {method}')
            log.debug(f'Count: {request_count}, Interval: {request_interval}')

            while request_count > 0:
                try:
                    connection = http.client.HTTPConnection(host, timeout=request_interval)
                    connection.request(method, path)
                    response = connection.getresponse()
                    log.info(f'Status: {response.status}, Reason: {response.reason}, Body: {response.read()}')
                    sleep(request_interval)
                except Exception as e:
                    log.warning(f'Exception: {e}')
                finally:
                    connection.close()
                    request_count -= 1

  ProxyLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ProxyLambdaFunction
      Description: v1

  ProxyLambdaActualAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ProxyLambdaFunction
      FunctionVersion: !GetAtt ProxyLambdaVersion.Version
      Name: proxy_actual

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Lambda Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - "-"
        - - "LambdaPolicy-Digito"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource:
              - !GetAtt LambdaRole.Arn
            Action:
              - iam:PassRole
      Roles:
        - Ref: LambdaRole

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - LambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  TargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: false
      Name: LambdaTargets
      TargetType: lambda
      Targets:
        - Id: !GetAtt [ LambdaFunction, Arn ]

  UnhealthyTargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 11
      HealthCheckPath: "/unhealthy_ping_invoke_lambda"
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: UnhealthyTargetsLambda
      TargetType: lambda
      Targets:
        - Id: !GetAtt [ LambdaFunction, Arn ]

