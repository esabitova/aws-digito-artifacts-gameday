#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Service task failure"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  ClusterName:
    type: String
    description: (Required) The name of the ECS Cluster
  ServiceName:
    type: String
    description: (Required) The name of ECS Service
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  SyntheticAlarmName:
    type: String
    description: (Required) The Synthetic Alarm which should be green within recovery time.
  PercentageOfTasksToStop:
    type: Integer
    description: (Optional) Percentage of tasks to be stopped. Only positive integer values, greater than 0 and less than 100.
    default: 30
mainSteps:
  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]

  - name: InjectFailure
    action: 'aws:branch'
    inputs:
      Choices:
        - Or:
          - Variable: "{{PercentageOfTasksToStop}}"
            NumericLesser: 1
          - Variable: "{{PercentageOfTasksToStop}}"
            NumericGreater: 100
          NextStep: FailWithIncorrectParams
      Default:
        StopSelectedTasks

  - name: FailWithIncorrectParams
    action: aws:executeScript
    description: |
      Fail if PercentageOfTasksToStop is less than 1 or greater than 100.
    inputs:
      Runtime: python3.7
      Handler: raise_exception
      InputPayload:
        ErrorMessage: "PercentageOfTasksToStop should be greater than 0 and less than 100."
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.raise_exception
    isEnd: true

  - name: StopSelectedTasks
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: stop_selected_tasks
      Script: |-
        SCRIPT_PLACEHOLDER::ecs_util.imports
        SCRIPT_PLACEHOLDER::ecs_util.check_required_params
        SCRIPT_PLACEHOLDER::ecs_util.stop_selected_tasks
      InputPayload:
        ServiceName: '{{ServiceName}}'
        ClusterName: '{{ClusterName}}'
        PercentageOfTasksToStop: '{{PercentageOfTasksToStop}}'

  - name: WaitTasksToBeRestored
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: wait_services_stable
      Script: |-
        SCRIPT_PLACEHOLDER::ecs_util.imports
        SCRIPT_PLACEHOLDER::ecs_util.check_required_params
        SCRIPT_PLACEHOLDER::ecs_util.wait_services_stable
      InputPayload:
        ServiceName: '{{ServiceName}}'
        ClusterName: '{{ClusterName}}'

  - name: AssertAlarmToBeGreen
    action: aws:assertAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
    isEnd: true
