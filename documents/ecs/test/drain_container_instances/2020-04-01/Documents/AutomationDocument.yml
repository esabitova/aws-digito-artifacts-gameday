#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Changes status of container instances to DRAINED"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  ClusterName:
    type: String
    description: (Required) ClusterName
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  ServiceHealthAlarmName:
    type: String
    description: (Required) Alarm which should be green after test.
  DrainagePercentage:
    type: String
    description: (Optional) The percentage of instances to be drained. Can be any value between 1 and 100
    default: "50"
  ExperimentDuration:
    type: String
    description: (Optional) The duration of experiment.
    default: PT10M
  IsRollback:
    type: String
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: ClusterName
        Selector: $.Payload.ClusterName[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution

  - name: AssertClusterName
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetExperimentTemplateIdFromPreviousExecution
          Variable: "{{ GetInputsFromPreviousExecution.ClusterName }}"
          StringEquals: '{{ ClusterName }}'
    isEnd: true

  - name: GetExperimentTemplateIdFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: FISExperimentTemplateId
        Selector: $.Payload.FISExperimentTemplateId[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
        StepName: 'CreateTemplate'
        ResponseField: 'FISExperimentTemplateId'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution

  - name: GetExperimentIdFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: ExperimentId
        Selector: $.Payload.ExperimentId[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
        StepName: 'StartExperiment'
        ResponseField: 'ExperimentId'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution

  - name: AssertExperimentIdExists
    action: aws:branch
    inputs:
      Choices:
        - NextStep: DeleteTemplateOnRollback
          Variable: "{{ GetExperimentIdFromPreviousExecution.ExperimentId }}"
          StringEquals: ''
      Default: StopExperimentForPreviousExecution

  - name: StopExperimentForPreviousExecution
    action: aws:executeAwsApi
    inputs:
      Service: fis
      Api: StopExperiment
      id: "{{GetExperimentIdFromPreviousExecution.ExperimentId}}"

  - name: WaitExperimentOnRollback
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: fis
      Api: GetExperiment
      id: "{{GetExperimentIdFromPreviousExecution.ExperimentId}}"
      PropertySelector: "$.experiment.state.status"
      DesiredValues: [ "completed", "stopped", "failed" ]

  - name: DeleteTemplateOnRollback
    action: aws:executeAwsApi
    inputs:
      Service: fis
      Api: DeleteExperimentTemplate
      id: "{{GetExperimentTemplateIdFromPreviousExecution.FISExperimentTemplateId}}"
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ServiceHealthAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]

  - name: CreateTemplate
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: fis
      Api: CreateExperimentTemplate
      clientToken: "{{ global:DATE_TIME }}"
      description: 'Drain ECS containers experiment'
      tags:
        Digito: "ecs:test:drain_container_instances"
      roleArn: "{{AutomationAssumeRole}}"
      stopConditions:
        - source: 'none'
      targets:
        ecs_clusters:
          resourceType: aws:ecs:cluster
          resourceArns:
            - "arn:aws:ecs:{{global:REGION}}:{{global:ACCOUNT_ID}}:cluster/{{ClusterName}}"
          selectionMode: ALL
      actions:
        test:
          actionId: aws:ecs:drain-container-instances
          parameters:
            drainagePercentage: "{{DrainagePercentage}}"
            duration: "{{ExperimentDuration}}"
          targets:
            Clusters: "ecs_clusters"
    outputs:
      - Name: FISExperimentTemplateId
        Selector: $.experimentTemplate.id
        Type: String

  - name: SleepForOneSecond
    description: Sleep to allow "global:DATE_TIME" variable to have a new value to make clientToken's unique
    onFailure: step:TriggerRollback
    onCancel: step:TriggerRollback
    action: aws:sleep
    inputs:
      Duration: PT1S

  - name: StartExperiment
    action: aws:executeAwsApi
    onFailure: step:TriggerRollback
    onCancel: step:TriggerRollback
    inputs:
      Service: fis
      Api: StartExperiment
      clientToken: "{{ global:DATE_TIME }}"
      experimentTemplateId: "{{CreateTemplate.FISExperimentTemplateId}}"
      tags:
        Digito: "ecs:test:drain_container_instances"
    outputs:
      - Name: ExperimentId
        Selector: $.experiment.id
        Type: String

  - name: AssertAlarmToBeRed
    action: aws:waitForAwsResourceProperty
    onFailure: step:TriggerRollback
    onCancel: step:TriggerRollback
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ ServiceHealthAlarmName }}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: WaitExperiment
    action: aws:waitForAwsResourceProperty
    onFailure: step:TriggerRollback
    onCancel: step:TriggerRollback
    maxAttempts: 1
    timeoutSeconds: 1200
    inputs:
      Service: fis
      Api: GetExperiment
      id: "{{StartExperiment.ExperimentId}}"
      PropertySelector: "$.experiment.state.status"
      DesiredValues: [ "completed", "stopped", "failed" ]

  - name: AssertExperimentCompleted
    action: aws:assertAwsResourceProperty
    onFailure: step:TriggerRollback
    onCancel: step:TriggerRollback
    inputs:
      Service: fis
      Api: GetExperiment
      id: "{{StartExperiment.ExperimentId}}"
      PropertySelector: "$.experiment.state.status"
      DesiredValues: [ "completed" ]

  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    onFailure: step:TriggerRollback
    onCancel: step:TriggerRollback
    maxAttempts: 1
    timeoutSeconds: 900
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{ServiceHealthAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]

  - name: DeleteTemplate
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: fis
      Api: DeleteExperimentTemplate
      id: "{{CreateTemplate.FISExperimentTemplateId}}"
    isEnd: true

  - name: TriggerRollback
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true
