#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Changes status of container instances to DRAINED"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  ClusterName:
    type: String
    description: (Required) ClusterName
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  SyntheticAlarmName:
    type: String
    description: (Required) Alarm which should be green after test.
  DrainagePercentage:
    type: Integer
    description: (Optional) The percentage of instances to be drained. Can be any value between 1 and 100
    default: 100
  ExperimentDuration:
    type: Duration
    description: (Optional) The duration of experiment. 
    default: PT10M
mainSteps:
  # add some step to assert and wait active status of the resource. See https://up-team.atlassian.net/wiki/spaces/DIG/pages/1033961542/General+code+requirements+for+SSM+documents#Assert-and-wait-for-the-resource-state-before-and-after-PerformRecovery
  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]

  - name: CreateTemplate
    # Create template
    # generate clientToken  (e.g guid)
    #   Call [boto3.create_experiment_template]
    #     Parameters:
            # clientToken=CreateTemplate.clientToken,
            # description='Drain ECS containers experiment',
            # stopConditions=[
            #     {
            #         'source': 'none'
            #     },
            # ],
            # targets={
            #     'ecs_clusters': {
            #         'resourceType': 'aws:ecs:cluster',
            #         'resourceArns': [
            #             arn:aws:ecs:[globals.REGION]:[globals.ACCOUNT_ID]:cluster/[params.ClusterName],
            #         ],
            #         'selectionMode': 'ALL'
            #     }
            # },
            # actions={
            #     'string': {
            #         'actionId': 'aws:ecs:drain-container-instances',
            #         'parameters': {
            #             'drainagePercentage': '[params.DrainagePercentage]',
            #             'duration': '[params.ExperimentDuration]'
            #         },
            #         'targets': {
            #             'Instances': 'ecs_clusters'
            #         }
            #     }
            # },
            # roleArn='string',
            # tags={
            #     'string': 'string'
            # } 
  # the following API calls should be done through executeScript since it's has limitation on duration 10 minutes. The experiment can last much longer.
  - name: StartExperiment
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: fis
      Api: StartExperiment
      clientToken: "{{CreateTemplate.clientToken}}"
      experimentTemplateId: "{{FISExperimentTemplateId}}"
    outputs:
      - Name: BackupDbClusterInstancesCountValue
        Selector: $.experiment.id
        Type: String
  - name: WaitExperiment
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 600
    inputs:
      Service: fis
      Api: GetExperiment
      Id: "{{StartExperiment.ExperimentId}}"
      PropertySelector: "$.experiment.state.status"
      DesiredValues: [ "completed", "stopped", "failed" ]

  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 900
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]