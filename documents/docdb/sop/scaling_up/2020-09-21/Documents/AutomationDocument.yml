#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Scales the cluster up"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - OutputRecoveryTime.RecoveryTime

parameters:
  DBClusterIdentifier:
    type: String
    description: (Required) DBClusterIdentifier
  DBInstanceClass:
    type: String
    description: (Optional) The class of new DB instances
    default: current
  NumberOfInstancesToCreate:
    type: Integer
    description: (Optional) The number of DB instances to create. Max 5
    default: 1
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: RecordStartTime
    action: "aws:executeScript"
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.start_time

  - name: PerformRecovery
    # Check that the number of instances to create between 1 and 5 (inclusive)
    # Determine DB cluster parameters:
    #   Call [boto3.describe_db_clusters]
    #     Parameters:
    #       DBClusterIdentifier=params.DBClusterIdentifier
    #     Take '.DBClusters[].Engine'
    # if params.DBInstanceClass == "current", determine the latest used instance class
    #   Call [boto3.describe_db_instances]
    #     Parameters:
    #       Filter = "db-cluster-id={params.DBClusterIdentifier}"
    #     Take the latest '.DBInstances[].DBInstanceClass' order by '.DBInstances[].InstanceCreateTime'
    # for i in range(0,params.NumberOfInstancesToCreate)
    #   Call [boto3.create_db_instance]
    #     Parameters:
    #       DBInstanceIdentifier=params.DBClusterIdentifier + random_string
    #       DBClusterIdentifier=params.DBClusterIdentifier
    #       DBInstanceClass=(from prev step) if params.DBInstanceClass == "current" else if params.DBInstanceClass
    #       Engine=(from previous step)
    #     Take '.DBInstance.DBInstanceIdentifier'
    # Make sure that all new instances are created and available. (Consider implementing it as a separate step)
    #   Call [boto3.describe_db_instances]
    #     Parameters:
    #       Filter = "db-cluster-id={params.DBClusterIdentifier}"
    #     Take '.DBInstances[].DBInstanceStatus' make sure it's "available"
  - name: OutputRecoveryTime
    action: "aws:executeScript"
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: recovery_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.recovery_time
      InputPayload:
        StartTime: "{{ RecordStartTime.StartTime }}"
