#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Test that the network-based alarm setup alerts when cluster becomes unreachable"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  DBClusterIdentifier:
    type: String
    description: (Required) DocDb Cluster Identifier
  DatabaseConnectionAttemptAlarmName:
    type: String
    description: (Required) Name of the alarm for db cluster. This should be green after the test.
  IsRollback:
    type: String
    description: (Optional) Set true to start the rollback.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: (Optional) Previous execution id for which rollback will be started.
    default: ''
  AutomationAssumeRole:
    type: String
    description: >-
      (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf. If no role is specified, Systems Manager Automation
      uses your IAM permissions to run this document.
outputs:
  - CreateEmptySecurityGroup.EmptySecurityGroupId
mainSteps:
  - name: CheckIsRollback
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetDBClusterIdentifierFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default:
        AssertDBClusterExistsInAvailableState

  # Rollback previous execution
  - name: GetDBClusterIdentifierFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: DBClusterIdentifier
        Selector: $.Payload.DBClusterIdentifier[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution
  - name: AssertDBClusterIdentifier
    action: aws:branch
    inputs:
      Choices:
        - NextStep: AssertDBClusterExistsInAvailableStateOnRollbackPreviousExecution
          Variable: "{{ GetDBClusterIdentifierFromPreviousExecution.DBClusterIdentifier }}"
          StringEquals: "{{ DBClusterIdentifier }}"
    isEnd: true
  - name: AssertDBClusterExistsInAvailableStateOnRollbackPreviousExecution
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: docdb
      Api: DescribeDBClusters
      DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      PropertySelector: '$.DBClusters[0].Status'
      DesiredValues: [ 'available' ]

  - name: PrepareVpcSecurityGroupIds
    action: aws:executeScript
    outputs:
      - Name: VpcSecurityGroupIds
        Selector: $.Payload.VpcSecurityGroupIds
        Type: StringList
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupDbClusterProperties'
        ResponseField: 'VpcSecurityGroupIds'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports
        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution
  - name: PrepareEmptyVpcSecurityGroupId
    action: aws:executeScript
    outputs:
      - Name: EmptySecurityGroupId
        Selector: $.Payload.EmptySecurityGroupId[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'CreateEmptySecurityGroup'
        ResponseField: 'EmptySecurityGroupId'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports
        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution
  - name: PrepareDBInstanceIdentifiers
    action: aws:executeScript
    outputs:
      - Name: DBInstanceIdentifiers
        Selector: $.Payload.DBInstanceIdentifiers
        Type: StringList
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupDbClusterProperties'
        ResponseField: 'DBInstanceIdentifiers'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports
        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution
  - name: AssertInstancesAreAvailableOnRollbackPreviousExecution
    action: aws:executeScript
    description: To avoid CONFIGURE_VPC_SECURITY_GROUP status of instances
    inputs:
      Runtime: python3.7
      Handler: wait_for_available_instances
      InputPayload:
        DBInstanceIdentifiers: '{{PrepareDBInstanceIdentifiers.DBInstanceIdentifiers}}'
        WaitTimeout: 1200
      Script: |-
        SCRIPT_PLACEHOLDER::docdb_util.imports
        SCRIPT_PLACEHOLDER::docdb_util.wait_for_available_instances
  - name: RestoreSecurityGroupIdsOnRollbackPreviousExecution
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: restore_security_group_ids
      InputPayload:
        VpcSecurityGroupIds: '{{PrepareVpcSecurityGroupIds.VpcSecurityGroupIds}}'
        DBClusterIdentifier: '{{DBClusterIdentifier}}'
      Script: |-
        SCRIPT_PLACEHOLDER::docdb_util.imports
        SCRIPT_PLACEHOLDER::docdb_util.restore_security_group_ids
    outputs:
      - Name: VpcSecurityGroupIds
        Selector: $.Payload.VpcSecurityGroupIds
        Type: StringList
  - name: RemoveEmptySecurityGroupOnRollbackPreviousExecution
    action: aws:executeScript
    timeoutSeconds: 900
    maxAttempts: 3
    inputs:
      Runtime: python3.7
      Handler: remove_empty_security_group
      InputPayload:
        EmptySecurityGroupId: '{{PrepareEmptyVpcSecurityGroupId.EmptySecurityGroupId}}'
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports

        SCRIPT_PLACEHOLDER::common_util.remove_empty_security_group
    isEnd: true

  - name: AssertDBClusterExistsInAvailableState
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: docdb
      Api: DescribeDBClusters
      DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      PropertySelector: '$.DBClusters[0].Status'
      DesiredValues: [ 'available' ]

  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - '{{ DatabaseConnectionAttemptAlarmName }}'
      PropertySelector: '$.MetricAlarms[0].StateValue'
      DesiredValues: [ 'OK' ]

  - name: BackupDbClusterProperties
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: get_db_cluster_properties
      InputPayload:
        DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      Script: |-
        SCRIPT_PLACEHOLDER::docdb_util.imports
        SCRIPT_PLACEHOLDER::docdb_util.get_db_cluster_properties
    outputs:
      - Name: DBInstanceIdentifiers
        Selector: $.Payload.DBInstanceIdentifiers
        Type: StringList
      - Name: VpcSecurityGroupIds
        Selector: $.Payload.VpcSecurityGroupIds
        Type: StringList
      - Name: DBSubnetGroup
        Selector: $.Payload.DBSubnetGroup
        Type: String
  - name: GetOneOfSubnets
    action: aws:executeAwsApi
    inputs:
      Service: docdb
      Api: DescribeDBSubnetGroups
      DBSubnetGroupName: '{{BackupDbClusterProperties.DBSubnetGroup}}'
    outputs:
      - Name: SubnetIdentifier
        Selector: $.DBSubnetGroups[0].Subnets[0].SubnetIdentifier
        Type: String
  - name: GetVpc
    action: aws:executeAwsApi
    inputs:
      Service: ec2
      Api: DescribeSubnets
      Filters:
        - Name: subnet-id
          Values:
            - '{{ GetOneOfSubnets.SubnetIdentifier }}'
    outputs:
      - Name: VpcId
        Selector: $.Subnets[0].VpcId
        Type: String
  - name: CreateEmptySecurityGroup
    action: aws:executeScript
    onFailure: step:AssertClusterIsAvailable
    onCancel: step:TriggerRollback
    outputs:
      - Name: EmptySecurityGroupId
        Selector: $.Payload.EmptySecurityGroupId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: create_empty_security_group
      InputPayload:
        VpcId: '{{GetVpc.VpcId}}'
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports

        SCRIPT_PLACEHOLDER::common_util.remove_empty_security_group

        SCRIPT_PLACEHOLDER::common_util.create_empty_security_group
  - name: ModifyVpcSecurityGroups
    action: aws:executeAwsApi
    onFailure: step:AssertClusterIsAvailable
    onCancel: step:TriggerRollback
    inputs:
      Service: docdb
      Api: ModifyDBCluster
      DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      VpcSecurityGroupIds:
        - '{{CreateEmptySecurityGroup.EmptySecurityGroupId}}'
    outputs:
      - Name: VpcSecurityGroups
        Selector: $.DBCluster.VpcSecurityGroups
        Type: MapList
  - name: AssertAlarmToBeRed
    action: aws:waitForAwsResourceProperty
    onFailure: step:AssertClusterIsAvailable
    onCancel: step:TriggerRollback
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - '{{ DatabaseConnectionAttemptAlarmName }}'
      PropertySelector: '$.MetricAlarms[0].StateValue'
      DesiredValues: [ 'ALARM' ]

  #    Rollback steps
  - name: AssertClusterIsAvailable
    action: aws:waitForAwsResourceProperty
    onCancel: step:TriggerRollback
    timeoutSeconds: 1200
    inputs:
      Service: docdb
      Api: DescribeDBClusters
      DBClusterIdentifier: '{{ DBClusterIdentifier }}'
      PropertySelector: '$.DBClusters[0].Status'
      DesiredValues: [ 'available' ]
  - name: AssertInstancesAreAvailable
    action: aws:executeScript
    description: To avoid CONFIGURE_VPC_SECURITY_GROUP status of instances
    onCancel: step:TriggerRollback
    inputs:
      Runtime: python3.7
      Handler: wait_for_available_instances
      InputPayload:
        DBInstanceIdentifiers: '{{BackupDbClusterProperties.DBInstanceIdentifiers}}'
        WaitTimeout: 1200
      Script: |-
        SCRIPT_PLACEHOLDER::docdb_util.imports
        SCRIPT_PLACEHOLDER::docdb_util.wait_for_available_instances
  - name: RestoreSecurityGroupIds
    action: aws:executeScript
    onCancel: step:TriggerRollback
    inputs:
      Runtime: python3.7
      Handler: restore_security_group_ids
      InputPayload:
        VpcSecurityGroupIds: '{{BackupDbClusterProperties.VpcSecurityGroupIds }}'
        DBClusterIdentifier: '{{DBClusterIdentifier}}'
      Script: |-
        SCRIPT_PLACEHOLDER::docdb_util.imports
        SCRIPT_PLACEHOLDER::docdb_util.restore_security_group_ids
    outputs:
      - Name: VpcSecurityGroupIds
        Selector: $.Payload.VpcSecurityGroupIds
        Type: StringList
  - name: RemoveEmptySecurityGroup
    action: aws:executeScript
    onCancel: step:TriggerRollback
    timeoutSeconds: 900
    maxAttempts: 3
    inputs:
      Runtime: python3.7
      Handler: remove_empty_security_group
      InputPayload:
        EmptySecurityGroupId: '{{CreateEmptySecurityGroup.EmptySecurityGroupId}}'
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports

        SCRIPT_PLACEHOLDER::common_util.remove_empty_security_group

  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - '{{ DatabaseConnectionAttemptAlarmName }}'
      PropertySelector: '$.MetricAlarms[0].StateValue'
      DesiredValues: [ 'OK' ]
    isEnd: true

  - name: TriggerRollback
    action: aws:executeScript
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true
