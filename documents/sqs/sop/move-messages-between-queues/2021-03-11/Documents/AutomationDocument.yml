#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: >-
            ## Id

            Digito-MoveSQSMessagesBetweenQueuesSOP_2021-03-11

            ## Intent

            Moves messages from one queue to another. Can be used to restore messages from Dead Letter queue back to main operation one or visa versa

            ## Type

            SOP

            ## Risk

            Medium

            ## Requirements
              * Source SQS Queue
              * Target SQS Queue

            ## Permission required for AutomationAssumeRole
              * sqs:SendMessage
              * sqs:DeleteMessage
              * sqs:ReceiveMessage
              * sqs:GetQueueAttributes

            ##### In case queues are encrypted with a KMS key
              * kms:GenerateDataKey
              * kms:Decrypt
              * kms:Encrypt

            ##### To log output to CloudWatch
              * logs:CreateLogStream
              * logs:PutLogEvents
              * logs:DescribeLogGroups
              * logs:DescribeLogStreams

            ## Cancellation behavior

            Fail

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) SourceQueueUrl
              * type: String
              * description: The URL of the source SQS Queue

            ### (Required) TargetQueueUrl
              * type: String
              * description: The URL of the target SQS Queue

            ### (Required) NumberOfMessagesToTransfer
              * type: Integer
              * description: The number of messages to be sent

            ### (Optional) MessagesTransferBatchSize
              * type: Integer
              * description: The number of messages that going to be transferred per batch. Maximum is 10
              * default: 10

            ### (Optional) ForceExecution
              * type: Boolean
              * description: (Optional) If True, validation of input parameters will be skipped
              * default: false

            ## Details

            This document reads the specified number of messages from the source queue, attempts to send them to the
            target queue, and then deletes sent messages from the source queue.
            Re-executing this document can lead to duplicate messages in the target queue if the message was not successfully transferred during the previous attempt.
            Number of messages, latency (e.g. cross-region transfer) and message size can lead to a significant time for transferring messages. Since there is a hard cap of 10 minutes for executeScript action, the script would automatically stop after 9 minutes and report on how many messages have been sent so far.
            Validates if given 'Source' and 'Target' queues are different types (FIFO, Standard). If so, the script will throw an error. Customers can suppress the validation by passing `ForceExecution` parameter.
            Bear in mind that in case of FIFO queue, messages might be re-ordered while being transferred to the target one.

            ## Steps executed in normal flow
              * RecordStartTime
              * TransferMessages
              * OutputRecoveryTime

            ## Outputs
            ### OutputRecoveryTime.RecoveryTime
              * type: Integer
              * description: SOP execution time in seconds

            ### TransferMessages.TimeElapsed
              * type: String
              * description: Time in seconds elapsed during message transfer

            ### TransferMessages.NumberOfMessagesTransferredToTarget
              * type: Integer
              * description: Number of messages transfered to target

            ### TransferMessages.NumberOfMessagesFailedToSendToTarget
              * type: Integer
              * description: Number of messages failed to be moved to target

            ### TransferMessages.NumberOfMessagesFailedToDeleteFromSource
              * type: Integer
              * description: Number of messages failed to be removed from source after transfer
schemaVersion: "0.3"
assumeRole: "{{AutomationAssumeRole}}"
parameters:
  SourceQueueUrl:
    type: String
    description: (Required) The URL of the source SQS Queue.
  TargetQueueUrl:
    type: String
    description: (Required) The URL of the target SQS Queue.
  NumberOfMessagesToTransfer:
    type: Integer
    description: (Required) The number of messages to be sent.
  MessagesTransferBatchSize:
    type: Integer
    description: (Optional) The number of messages that going to be transferred per batch. Maximum is 10
    default: 10
  ForceExecution:
    type: Boolean
    description: (Optional) If True, validation of input parameters will be skipped
    default: false
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
outputs:
  - "OutputRecoveryTime.RecoveryTime"
  - "TransferMessages.NumberOfMessagesTransferredToTarget"
  - "TransferMessages.NumberOfMessagesFailedToSendToTarget"
  - "TransferMessages.NumberOfMessagesFailedToDeleteFromSource"
  - "TransferMessages.TimeElapsed"
mainSteps:
  - name: RecordStartTime
    description: 'Start recording execution time'
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.start_time

  - name: TransferMessages
    description: >-
      Execute script that reads messages from source source, sends them to target source, confirms that messages were
      received and removes them from source afterwards. Returns the number of messages moved, failed, and failed to be
      removed from source but transferred to target.
    action: aws:executeScript
    outputs:
      - Name: "NumberOfMessagesTransferredToTarget"
        Selector: "$.Payload.NumberOfMessagesTransferredToTarget"
        Type: Integer
      - Name: "NumberOfMessagesFailedToSendToTarget"
        Selector: "$.Payload.NumberOfMessagesFailedToSendToTarget"
        Type: Integer
      - Name: "NumberOfMessagesFailedToDeleteFromSource"
        Selector: "$.Payload.NumberOfMessagesFailedToDeleteFromSource"
        Type: Integer
      - Name: "TimeElapsed"
        Selector: "$.Payload.TimeElapsed"
        Type: String
    inputs:
      Runtime: "python3.7"
      Handler: "transfer_messages"
      InputPayload:
        SourceQueueUrl: '{{SourceQueueUrl}}'
        TargetQueueUrl: '{{TargetQueueUrl}}'
        NumberOfMessagesToTransfer: '{{NumberOfMessagesToTransfer}}'
        MessagesTransferBatchSize: '{{MessagesTransferBatchSize}}'
        ForceExecution: '{{ForceExecution}}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports

        SCRIPT_PLACEHOLDER::sqs_util.transform_messages
        SCRIPT_PLACEHOLDER::sqs_util.transform_message_and_attributes
        SCRIPT_PLACEHOLDER::sqs_util.transform_message_from_fifo_to_fifo
        SCRIPT_PLACEHOLDER::sqs_util.transform_message_from_standard_to_fifo
        SCRIPT_PLACEHOLDER::sqs_util.send_messages
        SCRIPT_PLACEHOLDER::sqs_util.receive_messages
        SCRIPT_PLACEHOLDER::sqs_util.transfer_messages
        SCRIPT_PLACEHOLDER::sqs_util.get_statistics
        SCRIPT_PLACEHOLDER::sqs_util.is_queue_fifo

  - name: OutputRecoveryTime
    description: 'Calculate execution time'
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: recovery_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.recovery_time
      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'
