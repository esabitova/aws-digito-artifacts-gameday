#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Test behavior when messages are not deleted from a specific queue"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  QueueUrl:
    type: String
    description: (Required) The URL of the queue
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  SQSUserErrorAlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: QueueUrl
        Selector: '$.Payload.QueueUrl[0]'
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution

  - name: AssertInputsFromPreviousExecution
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRollbackOfPreviousExecution
          Variable: '{{ GetInputsFromPreviousExecution.QueueUrl }}'
          StringEquals: '{{ QueueUrl }}'
    isEnd: true

  - name: PrepareRollbackOfPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: Policy
        Selector: $.Payload.Policy[0]
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupCurrentExecution'
        ResponseField: 'Policy'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution

  - name: RollbackPreviousExecution
    action: aws:executeScript
    inputs:
      Runtime: python3.6
      Handler: revert_sqs_policy
      InputPayload:
        OptionalBackupPolicy: '{{PrepareRollbackOfPreviousExecution.Policy}}'
        QueueUrl: '{{ QueueUrl }}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports

        SCRIPT_PLACEHOLDER::sqs_util.revert_sqs_policy
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: BackupCurrentExecution
    action: aws:executeAwsApi
    outputs:
      - Name: Policy
        Selector: '$.Attributes.Policy'
        Type: String
      - Name: QueueArn
        Selector: '$.Attributes.QueueArn'
        Type: String
    inputs:
      Service: sqs
      Api: GetQueueAttributes
      AttributeNames:
        - Policy
        - QueueArn
      QueueUrl: '{{ QueueUrl }}'
  - name: GetPolicyWithDenyOnDeleteMessageAction
    action: aws:executeScript
    outputs:
      - Name: Policy
        Selector: $.Payload.Policy
        Type: String
      - Name: PolicySid
        Selector: $.Payload.PolicySid
        Type: String
      - Name: DenyPolicyStatementSid
        Selector: $.Payload.DenyPolicyStatementSid
        Type: String
    inputs:
      Runtime: python3.6
      Handler: add_deny_in_sqs_policy
      InputPayload:
        SourcePolicy: '{{BackupCurrentExecution.Policy}}'
        ActionsToDeny:
          - "sqs:DeleteMessage"
        Resource: '{{BackupCurrentExecution.QueueArn}}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports

        SCRIPT_PLACEHOLDER::sqs_util.add_deny_in_sqs_policy
  - name: UpdatePolicy
    action: aws:executeAwsApi
    inputs:
      Service: sqs
      Api: SetQueueAttributes
      QueueUrl: '{{ QueueUrl }}'
      Attributes:
        Policy: '{{ GetPolicyWithDenyOnDeleteMessageAction.Policy }}'
  - name: AssertAlarmToBeRed
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1000
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]
  - name: RollbackCurrentExecution
    action: aws:executeScript
    onCancel: 'step:TriggerRollback'
    inputs:
      Runtime: python3.6
      Handler: revert_sqs_policy
      InputPayload:
        OptionalBackupPolicy: '{{BackupCurrentExecution.Policy}}'
        QueueUrl: '{{ QueueUrl }}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports

        SCRIPT_PLACEHOLDER::sqs_util.revert_sqs_policy
  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true
  - name: TriggerRollback
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.6
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true
