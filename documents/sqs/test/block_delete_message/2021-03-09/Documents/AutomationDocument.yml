#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: >-
            ## Id

            Digito-BlockSQSDeleteMessageTest_2021-03-09

            ## Intent

            Test behavior when messages are not deleted from a specific queue. Adds deny policy to delete messages from queue and waits for ApproximateAgeOfOldestMessage metric alarm to indicate messages not being deleted and stay on queue for a time higher that the average time to process

            ## Type

            TEST

            ## Risk

            High

            ## Requirements:
              * SQS queue
              * Amazon CloudWatch alarm is setup for [ApproximateAgeOfOldestMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Threshold age should be higher than average time to process message on this queue

            ## Permission required for AutomationAssumeRole
              * cloudwatch:DescribeAlarms
              * sqs:GetQueueAttributes
              * sqs:SetQueueAttributes
              * ssm:GetParameters
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * iam:PassRole

            ## Supports Rollback

            Yes. The document returns the queue policy to its initial state

            ## Cancellation behavior

            The document returns the queue policy to its initial state

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) QueueUrl
              * type: String
              * description: The URL of the SQS queue

            ### (Required) SQSUserErrorAlarmName
              * type: String
              * description: Amazon CloudWatch alarm for [ApproximateAgeOfOldestMessage](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Maximum age should be higher than average time to process message on this queue

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details

            The document injects failure by adding a deny delete message policy to the queue. In case of issues users
            should manually remove the deny delete message policy.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertAlarmToBeGreenBeforeTest
              * BackupCurrentExecution
              * GetPolicyWithDenyOnDeleteMessageAction
              * UpdatePolicy
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetInputsFromPreviousExecution
              * AssertInputsFromPreviousExecution
              * PrepareRollbackOfPreviousExecution
              * RollbackPreviousExecution

            ## Outputs

            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  QueueUrl:
    type: String
    description: (Required) The URL of the queue
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  SQSUserErrorAlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: >-
      (Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up
    default: ''
mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: QueueUrl
        Selector: '$.Payload.QueueUrl[0]'
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution

  - name: AssertInputsFromPreviousExecution
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRollbackOfPreviousExecution
          Variable: '{{ GetInputsFromPreviousExecution.QueueUrl }}'
          StringEquals: '{{ QueueUrl }}'
    isEnd: true

  - name: PrepareRollbackOfPreviousExecution
    description: Get initial queue policy from previous execution
    action: aws:executeScript
    outputs:
      - Name: Policy
        Selector: $.Payload.Policy[0]
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupCurrentExecution'
        ResponseField: 'Policy'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution

  - name: RollbackPreviousExecution
    description: Revert queue policy to initial state
    action: aws:executeScript
    inputs:
      Runtime: python3.6
      Handler: revert_sqs_policy
      InputPayload:
        OptionalBackupPolicy: '{{PrepareRollbackOfPreviousExecution.Policy}}'
        QueueUrl: '{{ QueueUrl }}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports

        SCRIPT_PLACEHOLDER::sqs_util.revert_sqs_policy
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1200
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: BackupCurrentExecution
    description: Backup initial queue policy for rollback
    action: aws:executeAwsApi
    outputs:
      - Name: Policy
        Selector: '$.Attributes.Policy'
        Type: String
      - Name: QueueArn
        Selector: '$.Attributes.QueueArn'
        Type: String
    inputs:
      Service: sqs
      Api: GetQueueAttributes
      AttributeNames:
        - Policy
        - QueueArn
      QueueUrl: '{{ QueueUrl }}'
  - name: GetPolicyWithDenyOnDeleteMessageAction
    description: Generate queue policy that denies message deletion
    action: aws:executeScript
    outputs:
      - Name: Policy
        Selector: $.Payload.Policy
        Type: String
      - Name: PolicySid
        Selector: $.Payload.PolicySid
        Type: String
      - Name: DenyPolicyStatementSid
        Selector: $.Payload.DenyPolicyStatementSid
        Type: String
    inputs:
      Runtime: python3.6
      Handler: add_deny_in_sqs_policy
      InputPayload:
        SourcePolicy: '{{BackupCurrentExecution.Policy}}'
        ActionsToDeny:
          - "sqs:DeleteMessage"
        Resource: '{{BackupCurrentExecution.QueueArn}}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports

        SCRIPT_PLACEHOLDER::sqs_util.add_deny_in_sqs_policy
  - name: UpdatePolicy
    description: Set queue policy to the generated one
    action: aws:executeAwsApi
    inputs:
      Service: sqs
      Api: SetQueueAttributes
      QueueUrl: '{{ QueueUrl }}'
      Attributes:
        Policy: '{{ GetPolicyWithDenyOnDeleteMessageAction.Policy }}'
  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 1000
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]
  - name: RollbackCurrentExecution
    description: Revert queue policy to initial state
    action: aws:executeScript
    onCancel: 'step:TriggerRollback'
    inputs:
      Runtime: python3.6
      Handler: revert_sqs_policy
      InputPayload:
        OptionalBackupPolicy: '{{BackupCurrentExecution.Policy}}'
        QueueUrl: '{{ QueueUrl }}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports

        SCRIPT_PLACEHOLDER::sqs_util.revert_sqs_policy
  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SQSUserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true
  - name: TriggerRollback
    description: This step is executed when ssm document is cancelled while it was in progress. This step starts a new execution of document in rollback mode to rollback the changes made as part of normal execution
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.6
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true
