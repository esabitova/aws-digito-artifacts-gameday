#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: >-
            ## Id
            Digito-ForceSQSCapacityFailureTest_2021-03-13

            ## Intent
            Test SQS behaviour after sending a message close to maximum allowed size. Wait for alarm for metric SentMessageSize to trigger when message size is higher than threshold which should be slightly less than 256kb

            ## Type
            TEST

            ## Risk
            Medium

            ## Requirements:
              * SQS queue
              * Amazon CloudWatch alarm is setup for [SentMessageSize](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Should trigger when size of sent messages sent is above threshold that is slightly less than 256kb

            ## Permission required for AutomationAssumeRole
              * cloudwatch:DescribeAlarms
              * sqs:SendMessage
              * sqs:ReceiveMessage
              * sqs:DeleteMessage
              * ssm:GetParameters
              * ssm:GetAutomationExecution
              * ssm:StartAutomationExecution
              * iam:PassRole

            ##### In case queues are encrypted with a KMS key
              * kms:GenerateDataKey
              * kms:Decrypt
              * kms:Encrypt

            ## Supports Rollback
            Yes. The document removes message which triggers the alarm

            ## Cancellation behavior
            The document removes message which triggers the alarm

            ## Inputs
            ### (Required) AutomationAssumeRole
              * type: String
              * description: ARN of the IAM role with permissions listed above

            ### (Required) QueueUrl
              * type: String
              * description: The URL of the SQS queue

            ### (Required) SentMessageSizeAlarmName
              * type: String
              * description: Amazon CloudWatch alarm for [SentMessageSize](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html) metric. Should trigger when queue has messages higher than threshold that is slightly less than 256kb

            ### (Optional) IsRollback
              * type: String
              * description: Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
              * default: false

            ### (Optional) PreviousExecutionId
              * type: String
              * description: SSM execution ID of the previous execution of this document for which resources need to be cleaned up

            ## Details
            The document injects failure by sending a message with a size above threshold of the specified alarm.
            In case of issues users should manually remove the message.

            ## Steps executed in normal flow
              * CheckIsRollback
              * AssertAlarmToBeGreenBeforeTest
              * GetAlarmThreshold
              * SendCapacityFailureMessage
              * AssertAlarmToBeRed
              * RollbackCurrentExecution
              * AssertAlarmToBeGreen

            ## Steps executed in rollback flow
              * CheckIsRollback
              * GetInputsFromPreviousExecution
              * AssertInputsFromPreviousExecution
              * PrepareRemoveOfFailureMessage
              * RemovePreviousExecutionFailureMessage

            ## Outputs
            None
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  QueueUrl:
    type: String
    description: (Required) The Url of the queue
  SentMessageSizeAlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: (Optional) Run the rollback steps of the document. True or False. If True, the parameter PreviousExecutionId should also be specified
    default: 'false'
  PreviousExecutionId:
    type: String
    description: (Optional) SSM execution ID of the previous execution of this document for which resources need to be cleaned up
    default: ''

mainSteps:
  - name: CheckIsRollback
    description: Check if document should be executed in rollback mode
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default:
        AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    description: Get input from previous execution. This will be used to validate that rollback is executed with the same input
    action: aws:executeScript
    outputs:
      - Name: QueueUrl
        Selector: '$.Payload.QueueUrl[0]'
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution

  - name: AssertInputsFromPreviousExecution
    description: Validate that rollback is executed with the same input
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRemoveOfFailureMessage
          Variable: '{{ GetInputsFromPreviousExecution.QueueUrl }}'
          StringEquals: '{{ QueueUrl }}'
    isEnd: true

  - name: PrepareRemoveOfFailureMessage
    description: Get message id of the injected message
    action: aws:executeScript
    outputs:
      - Name: MessageId
        Selector: $.Payload.MessageId[0]
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'SendCapacityFailureMessage'
        ResponseField: 'MessageId'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports
        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution

  - name: RemovePreviousExecutionFailureMessage
    description: Delete injected message
    action: aws:executeScript
    inputs:
      Runtime: python3.6
      Handler: delete_message_by_id
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageId: '{{PrepareRemoveOfFailureMessage.MessageId}}'
        TimeOut: '300'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports
        SCRIPT_PLACEHOLDER::sqs_util.get_message_receipt_handle
        SCRIPT_PLACEHOLDER::sqs_util.delete_message_by_id
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    description: Ensure alarm is green before starting test. Fail if alarm is not green within expected time
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SentMessageSizeAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]

  - name: GetAlarmThreshold
    description: Get the provided alarm's threshold that to set message size higher than the threshold
    action: aws:executeScript
    outputs:
      - Name: SizeAboveThreshold
        Selector: $.Payload.ValueAboveThreshold
        Type: Integer
    inputs:
      Runtime: python3.6
      Handler: get_metric_alarm_threshold_values
      InputPayload:
        AlarmName: '{{SentMessageSizeAlarmName}}'
      Script: |-
        SCRIPT_PLACEHOLDER::cloudwatch_util.imports
        SCRIPT_PLACEHOLDER::cloudwatch_util.get_metric_alarm_threshold_values

  - name: SendCapacityFailureMessage
    description: Send message to queue with a payload size bigger than the provided alarm's threshold
    action: aws:executeScript
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    outputs:
      - Name: MessageId
        Selector: $.Payload.MessageId
        Type: String
    inputs:
      Runtime: python3.6
      Handler: send_message_of_size
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageSize: '{{GetAlarmThreshold.SizeAboveThreshold}}'
        MessageDeduplicationId: '{{global:DATE_TIME}}'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports
        SCRIPT_PLACEHOLDER::sqs_util.send_message_of_size

  - name: AssertAlarmToBeRed
    description: Wait for expected alarm to be red after failure is injected
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 300
    onFailure: 'step:RollbackCurrentExecution'
    onCancel: 'step:TriggerRollback'
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SentMessageSizeAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    description: Revert queue policy to initial state
    action: aws:executeScript
    onCancel: 'step:TriggerRollback'
    inputs:
      Runtime: python3.6
      Handler: delete_message_by_id
      InputPayload:
        QueueUrl: '{{QueueUrl}}'
        MessageId: '{{SendCapacityFailureMessage.MessageId}}'
        TimeOut: '300'
      Script: |-
        SCRIPT_PLACEHOLDER::sqs_util.imports
        SCRIPT_PLACEHOLDER::sqs_util.get_message_receipt_handle
        SCRIPT_PLACEHOLDER::sqs_util.delete_message_by_id

  - name: AssertAlarmToBeGreen
    description: Wait for the alarm to be green after test is complete
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SentMessageSizeAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true
  - name: TriggerRollback
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.6
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true
