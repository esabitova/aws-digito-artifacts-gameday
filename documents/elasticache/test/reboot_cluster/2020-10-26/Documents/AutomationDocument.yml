#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Reboots the cluster"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  CacheClusterId:
    type: String
    description: (Required) The CacheClusterId
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  SyntheticAlarmName:
    type: String
    description: (Required) Alarm which should be green after test.
  NumberOfNodeToReboot:
    type: Integer
    description: (Optional) The number of node to reboot. To reboot all, set -1
    default: -1
mainSteps:
  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]

  - name: InjectFailure
    # Take nodes to reboot
    #   Call [boto3.describe_cache_clusters]
    #     Parameters:
    #       CacheClusterId=params.CacheClusterId
    #     Take params.NumberOfNodeToReboot randomly from '.CacheNodes[].CacheNodeId' array
    # Reboot Cluster
    #   Call [boto3.reboot_cache_cluster]
    #     Parameters:
    #       CacheClusterId=params.CacheClusterId
    #       CacheNodeIdsToReboot=[random array from the previous step]
    # Await the cluster to be available
    #   Call [boto3.describe_cache_clusters]
    #     Parameters:
    #       CacheClusterId=params.CacheClusterId
    #     Wait '.CacheClusterStatus' = available

  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 900
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]