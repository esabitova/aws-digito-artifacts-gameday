#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Test API Gateway HTTP or Web sockets behavior when hitting throttling threshold"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  HttpWsApiGwId:
    type: String
    description: (Required) The ID of the HTTP or WS API Gateway
  HttpWsStageName:
    type: String
    description: (Required) The stage name of the HTTP or WS API Gateway
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  4xxAlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetInputsFromPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: HttpWsApiGwId
        Selector: $.Payload.HttpWsApiGwId[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution

  - name: PrepareRollbackOfPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: HttpWsThrottlingRateOriginalValue
        Selector: $.Payload.HttpWsThrottlingRateOriginalValue[0]
        Type: String
      - Name: HttpWsThrottlingBurstOriginalValue
        Selector: $.Payload.HttpWsThrottlingBurstOriginalValue[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
        StepName: 'BackupThrottlingConfiguration'
        ResponseField: 'HttpWsThrottlingRateOriginalValue,HttpWsThrottlingBurstOriginalValue'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports
        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution

  - name: AssertHttpWsApiGwId
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RollbackPreviousExecution
          Variable: "{{ GetInputsFromPreviousExecution.HttpWsApiGwId }}"
          StringEquals: '{{ HttpWsApiGwId }}'
    isEnd: true

  - name: RollbackPreviousExecution
    maxAttempts: 5
    action: aws:executeScript
    description: Rollback throttling settings for HTTP or WS API Gateway
    outputs:
      - Name: HttpWsThrottlingRateNewValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstNewValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsThrottlingRate: '{{ PrepareRollbackOfPreviousExecution.HttpWsThrottlingRateOriginalValue }}'
        HttpWsThrottlingBurst: '{{ PrepareRollbackOfPreviousExecution.HttpWsThrottlingBurstOriginalValue }}'
      Script: |-
        SCRIPT_PLACEHOLDER::apigw2_utils.imports
        SCRIPT_PLACEHOLDER::apigw2_utils.assert_https_status_code_200
        SCRIPT_PLACEHOLDER::apigw2_utils.get_service_quota
        SCRIPT_PLACEHOLDER::apigw2_utils.get_stage
        SCRIPT_PLACEHOLDER::apigw2_utils.set_throttling_config
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]

  - name: BackupThrottlingConfiguration
    action: aws:executeAwsApi
    outputs:
      - Name: HttpWsThrottlingRateOriginalValue
        Selector: '$.DefaultRouteSettings.ThrottlingRateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstOriginalValue
        Selector: '$.DefaultRouteSettings.ThrottlingBurstLimit'
        Type: Integer
    inputs:
      Service: apigatewayv2
      Api: GetStage
      ApiId: "{{ HttpWsApiGwId }}"
      StageName: "{{ HttpWsStageName }}"

  - name: ChangeThrottlingConfiguration
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    action: aws:executeScript
    description: Update throttling settings for HTTP or WS API Gateway
    outputs:
      - Name: HttpWsThrottlingRateNewValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstNewValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsThrottlingRate: 0
        HttpWsThrottlingBurst: 0.0
      Script: |-
        SCRIPT_PLACEHOLDER::apigw2_utils.imports
        SCRIPT_PLACEHOLDER::apigw2_utils.assert_https_status_code_200
        SCRIPT_PLACEHOLDER::apigw2_utils.get_service_quota
        SCRIPT_PLACEHOLDER::apigw2_utils.get_stage
        SCRIPT_PLACEHOLDER::apigw2_utils.set_throttling_config

  - name: AssertAlarmToBeRed
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 900
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    maxAttempts: 5
    onCancel: step:TriggerRollback
    action: aws:executeScript
    description: Rollback throttling settings for HTTP or WS API Gateway
    outputs:
      - Name: HttpWsThrottlingRateNewValue
        Selector: '$.Payload.RateLimit'
        Type: Integer
      - Name: HttpWsThrottlingBurstNewValue
        Selector: '$.Payload.BurstLimit'
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: set_throttling_config
      InputPayload:
        HttpWsApiGwId: '{{ HttpWsApiGwId }}'
        HttpWsStageName: '{{ HttpWsStageName }}'
        HttpWsThrottlingRate: '{{ BackupThrottlingConfiguration.HttpWsThrottlingRateOriginalValue }}'
        HttpWsThrottlingBurst: '{{ BackupThrottlingConfiguration.HttpWsThrottlingBurstOriginalValue }}'
      Script: |-
        SCRIPT_PLACEHOLDER::apigw2_utils.imports
        SCRIPT_PLACEHOLDER::apigw2_utils.assert_https_status_code_200
        SCRIPT_PLACEHOLDER::apigw2_utils.get_service_quota
        SCRIPT_PLACEHOLDER::apigw2_utils.get_stage
        SCRIPT_PLACEHOLDER::apigw2_utils.set_throttling_config

  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 900
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{4xxAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true

  - name: TriggerRollback
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports
        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true