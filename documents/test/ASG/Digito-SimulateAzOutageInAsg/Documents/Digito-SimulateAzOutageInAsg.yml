---
description: 'Test that the application can withstand az outage in ASG.'
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutoScalingGroupName:
    type: String
    description: (Required) Name of AutoScalingGroup.
  SyntheticAlarmName:
    type: String
    description: (Required) Alarm which should stay green during this test.
  AzOutageAlarmName:
    type: String
    description: (Required) Alarm which should go red during the test and green after the test.
  TestDurationInMinutes:
    type: String
    description: (Required) Test duration in minutes.
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  IsRollback:
    type: String
    description: (Optional) Provide true to cleanup appliance created in previous execution.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: SelectExecutionMode
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: AssertNoSuspendedProcesses
          Variable: '{{IsRollback}}'
          StringEquals: 'false'
      Default: ResumeLaunchProcessInAsg
  - name: AssertNoSuspendedProcesses
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.6
      Handler: asg_util.assert_no_suspended_process
      InputPayload:
        AutoScalingGroupName: '{{AutoScalingGroupName}}'
      Attachment: digito_gameday_primitives.zip
  - name: AssertSyntheticAlarmToBeGreenBeforeTest
    action: aws:assertAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: Abort
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
      - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: AssertAzOutageAlarmToBeGreenBeforeTest
    action: aws:assertAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: Abort
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
      - "{{AzOutageAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: SuspendLaunchProcessInAsg
    action: 'aws:executeAwsApi'
    onFailure: Abort
    inputs:
      Service: autoscaling
      Api: SuspendProcesses
      AutoScalingGroupName: '{{AutoScalingGroupName}}'
      ScalingProcesses:
      - 'Launch'
  - name: GetInstancesInRandomAz
    action: 'aws:executeScript'
    onFailure: 'step:ResumeLaunchProcessInAsg'
    maxAttempts: 10
    timeoutSeconds: 900
    outputs:
      - Name: InstanceIds
        Selector: $.Payload.InstanceIds
        Type: StringList
    inputs:
      Runtime: python3.6
      Handler: asg_util.get_instance_ids_in_asg_random_az
      InputPayload:
        AutoScalingGroupName: '{{AutoScalingGroupName}}'
      Attachment: digito_gameday_primitives.zip
  - name: TerminateInstances
    action: 'aws:changeInstanceState'
    onFailure: 'step:ResumeLaunchProcessInAsg'
    inputs:
      InstanceIds: '{{GetInstancesInRandomAz.InstanceIds}}'
      DesiredState: 'terminated'
  - name: WaitForTestCompletion
    action: 'aws:sleep'
    onFailure: 'step:ResumeLaunchProcessInAsg'
    inputs:
      Duration: 'PT{{TestDurationInMinutes}}M'
  - name: AssertSyntheticAlarmToBeGreenAfterTest
    action: aws:assertAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: 'step:ResumeLaunchProcessInAsg'
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
      - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: WaitForAzOutageAlarmToBeRed
    action: aws:waitForAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: 'step:ResumeLaunchProcessInAsg'
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
      - "{{AzOutageAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["ALARM"]
  - name: ResumeLaunchProcessInAsg
    action: 'aws:executeAwsApi'
    onFailure: Abort
    inputs:
      Service: autoscaling
      Api: ResumeProcesses
      AutoScalingGroupName: '{{AutoScalingGroupName}}'
      ScalingProcesses:
      - 'Launch'
  - name: WaitForAzOutageAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: Abort
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
      - "{{AzOutageAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
    isEnd: true