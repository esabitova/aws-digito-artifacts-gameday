#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
schemaVersion: '0.3'
description: Execute memory stress via Run Command
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf
  AutoScalingGroupName:
    type: String
    description: (Required) Name of AutoScalingGroup
  MemoryUtilizationAlarmName:
    type: String
    description: (Required) ASG MemoryUtilization alarm which should be green after test
  DurationSeconds:
    type: String
    description: (Optional) The duration of the attack in seconds (default/recommended 300)
    default: '300'
  Workers:
    type: String
    description: "(Optional) The number of virtual memory stressors (default: 1)"
    default: '1'
  LoadPercent:
    type: String
    description: (Optional) Specify the target memory load percentage. Valid values are between 0 (no load) and 100 (full load) (default - 100)
    default: "100"
    allowedPattern: "^(100|[1-9]?[0-9])$"
  PercentageOfInstances:
    type: Integer
    description: (Optional) Percentage of ASG EC2 instances to be impacted (default 1)
    default: 1
  ExpectedRecoveryTime:
    type: String
    description: (Optional) Expected ASG EC2 instances recovery time in seconds (default 1)
    default: '1'
  IsRollback:
    type: String
    description: (Optional) Provide true to terminate stress testing
    default: 'false'
  PreviousExecutionId:
    type: String
    description: (Optional) Previous execution id for which resources stress testing should be terminated
    default: ''
mainSteps:
  - name: SelectExecutionMode
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: AssertAlarmToBeGreenBeforeTest
          Variable: '{{IsRollback}}'
          StringEquals: 'false'
      Default: GetInputsFromPreviousExecution
  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{MemoryUtilizationAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: GetAsgInstanceIds
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: InstanceIds
        Selector: $.Payload.InstanceIds
        Type: StringList
    inputs:
      Runtime: python3.6
      Handler: get_healthy_instance_ids_in_asg
      InputPayload:
        AutoScalingGroupName: '{{AutoScalingGroupName}}'
      Script: |-
        SCRIPT_PLACEHOLDER::asg_util.imports

        SCRIPT_PLACEHOLDER::asg_util.get_healthy_instance_ids_in_asg
  - name: GetInstancesByPercentage
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: InstanceIds
        Selector: $.Payload.InstanceIds
        Type: StringList
    inputs:
      Runtime: python3.6
      Handler: get_instance_ids_by_percentage
      InputPayload:
        InstanceIds: '{{GetAsgInstanceIds.InstanceIds}}'
        Percentage: '{{PercentageOfInstances}}'
      Script: |-
        SCRIPT_PLACEHOLDER::asg_util.imports

        SCRIPT_PLACEHOLDER::asg_util.get_instance_ids_by_percentage
  - name: RunMemoryStress
    action: aws:runCommand
    maxAttempts: 3
    onFailure: Abort
    onCancel: 'step:TriggerRollback'
    inputs:
      DocumentName: Digito-RunMemoryStress_2020-07-28
      InstanceIds:
        - '{{GetInstancesByPercentage.InstanceIds}}'
      Parameters:
        Percent: '{{LoadPercent}}'
        Workers: '{{Workers}}'
        DurationSeconds: '{{DurationSeconds}}'
  - name: AssertAlarmTriggered
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.6
      Handler: verify_alarm_triggered
      InputPayload:
        AlarmName: '{{MemoryUtilizationAlarmName}}'
        DurationInSeconds: '{{DurationSeconds}}'
      Script: |-
        SCRIPT_PLACEHOLDER::cloudwatch_util.imports

        SCRIPT_PLACEHOLDER::cloudwatch_util.verify_alarm_triggered
  - name: WaitExpectedRecoveryTime
    action: 'aws:sleep'
    onFailure: Abort
    inputs:
      Duration: 'PT{{ExpectedRecoveryTime}}S'
  - name: AssertAlarmToBeGreen
    action: aws:assertAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: Abort
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
          - "{{MemoryUtilizationAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
    isEnd: true
  - name: GetInputsFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: AutoScalingGroupName
        Selector: $.Payload.AutoScalingGroupName[0]
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution
  - name: AssertAutoScalingGroupName
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetPreviousExecutionDetails
          Variable: "{{ GetInputsFromPreviousExecution.AutoScalingGroupName }}"
          StringEquals: '{{ AutoScalingGroupName }}'
    isEnd: true
  - name: GetPreviousExecutionDetails
    action: 'aws:executeScript'
    maxAttempts: 2
    onFailure: Abort
    outputs:
    - Name: InstanceIds
      Selector: $.Payload.InstanceIds[0]
      Type: String
    inputs:
      Runtime: python3.6
      Handler: get_output_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'GetAsgInstanceIds'
        ResponseField: 'InstanceIds'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_output_from_ssm_step_execution
  - name: KillStressCommandOnRollback
    action: 'aws:executeAutomation'
    onFailure: Abort
    inputs:
      DocumentName: Digito-KillStressOnHealthyInstances_2020-07-28
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        AutoScalingGroupName: '{{AutoScalingGroupName}}'
        InstanceIds: '{{GetPreviousExecutionDetails.InstanceIds}}'
    isEnd: true
  - name: TriggerRollback
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.6
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true
