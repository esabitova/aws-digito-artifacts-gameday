#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Scale up an ec2 to the successor instance type"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - OutputRecoveryTime.RecoveryTime
  - CalculateTargetType.TargetInstanceType

parameters:
  EC2InstanceIdentifier:
    type: String
    allowedPattern: "^i-[a-z0-9]{8,17}$"
    description: (Required) EC2InstanceIdentifier
  EC2InstanceTargetInstanceType:
    type: String
    description: (Optional) EC2InstanceTargetInstanceType
    default: ''
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: RecordStartTime
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.start_time

  - name: AssertInstanceInAvailableState
    action: aws:assertAwsResourceProperty
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      IncludeAllInstances: true
      PropertySelector: "$.InstanceStatuses..InstanceState.Name"
      DesiredValues:
        - "running"
        - "stopped"
  - name: DescribeEC2Instance
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
    outputs:
      - Selector: $.Reservations[0].Instances[0].InstanceType
        Name: InstanceType
        Type: String
  - name: CalculateTargetType
    description: Calculates the target instance type
    action: 'aws:executeScript'
    outputs:
      - Name: OriginalInstanceType
        Selector: $.Payload.OriginalInstanceType
        Type: String
      - Name: TargetInstanceType
        Selector: $.Payload.TargetInstanceType
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_bigger_instance
      Script: |
        SCRIPT_PLACEHOLDER::ec2_util.imports
        SCRIPT_PLACEHOLDER::ec2_util.get_bigger_instance
      InputPayload:
        RequestInstanceType: '{{ EC2InstanceTargetInstanceType }}'
        CurrentInstanceType: '{{ DescribeEC2Instance.InstanceType }}'
  - name: StopEC2Instance
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: StopInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
  - name: ValidateInstanceIsStopped
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 900
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      IncludeAllInstances: true
      PropertySelector: "$.InstanceStatuses..InstanceState.Name"
      DesiredValues:
        - "stopped"
  - name: ModifyInstanceAttribute
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: ModifyInstanceAttribute
      InstanceId: "{{ EC2InstanceIdentifier }}"
      InstanceType:
        Value: "{{ CalculateTargetType.TargetInstanceType }}"
    outputs:
      - Selector: $.InstanceType
        Name: InstanceType
        Type: String
  - name: StartEC2Instance
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: StartInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
  - name: ValidateInstanceIsAvailable
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 900
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      PropertySelector: "$.InstanceStatuses..InstanceState.Name"
      DesiredValues:
        - "running"
  - name: AssertInstanceType
    action: aws:assertAwsResourceProperty
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeInstances
      InstanceIds:
        - "{{ EC2InstanceIdentifier }}"
      PropertySelector: "$.Reservations[0].Instances[0].InstanceType"
      DesiredValues:
        - "{{ CalculateTargetType.TargetInstanceType }}"
  - name: OutputRecoveryTime
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: recovery_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.recovery_time
      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'