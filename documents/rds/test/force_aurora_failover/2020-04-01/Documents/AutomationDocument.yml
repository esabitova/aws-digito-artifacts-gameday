#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: 'Failover Aurora cluster'
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  ClusterId:
    type: String
    description: (Required) Identifies the Aurora cluster subject to action.
  InstanceId:
    type: String
    description: (Optional) The DB instance to promote to the primary instance.
    default: ''
  SyntheticAlarmName:
    type: String
    description: (Required) Alarm which should be green after test.
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: WaitForAvailableStateBeforeFailover
    action: 'aws:waitForAwsResourceProperty'
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: Abort
    inputs:
      Service: rds
      Api: DescribeDBClusters
      DBClusterIdentifier: '{{ClusterId}}'
      PropertySelector: '$.DBClusters[0].Status'
      DesiredValues:
        - available
  - name: GetClusterWriterId
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: WriterId
        Selector: $.Payload.WriterId
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_cluster_writer_id
      InputPayload:
        ClusterId: '{{ClusterId}}'
      Script: |-
        SCRIPT_PLACEHOLDER::rds_util.imports

        SCRIPT_PLACEHOLDER::rds_util.get_cluster_writer_id
        SCRIPT_PLACEHOLDER::rds_util._parse_writer_id
  - name: PrimaryInstanceSelector
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: FailoverClusterDefault
          Variable: '{{InstanceId}}'
          StringEquals: ''
      Default: FailoverClusterWithPrimary
  - name: FailoverClusterWithPrimary
    action: 'aws:executeAwsApi'
    inputs:
      Service: rds
      Api: FailoverDBCluster
      DBClusterIdentifier: '{{ClusterId}}'
      TargetDBInstanceIdentifier: '{{InstanceId}}'
    nextStep: WaitClusterFailoverCompleted
  - name: FailoverClusterDefault
    action: 'aws:executeAwsApi'
    inputs:
      Service: rds
      Api: FailoverDBCluster
      DBClusterIdentifier: '{{ClusterId}}'
  - name: WaitClusterFailoverCompleted
    action: 'aws:executeScript'
    onFailure: Abort
    timeoutSeconds: 600
    inputs:
      Runtime: python3.6
      Handler: wait_cluster_failover_completed
      InputPayload:
        ClusterId: '{{ClusterId}}'
        WriterId: '{{GetClusterWriterId.WriterId}}'
      Script: |-
        SCRIPT_PLACEHOLDER::rds_util.imports

        SCRIPT_PLACEHOLDER::rds_util.wait_cluster_failover_completed
        SCRIPT_PLACEHOLDER::rds_util._parse_writer_id
  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    maxAttempts: 10
    timeoutSeconds: 600
    onFailure: Abort
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
      - "{{SyntheticAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
    isEnd: true
