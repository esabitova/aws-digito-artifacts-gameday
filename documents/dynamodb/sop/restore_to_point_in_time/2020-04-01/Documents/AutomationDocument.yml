description: "Restore To Point In Time SOP"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  DynamoDBTableSourceName:
    type: String
    description: (Required) The DynamoDB Table Source Name.
  DynamoDBTableTargetName:
    type: String
    description: (Required) The DynamoDB Table Target Name.
  RecoveryPointDateTime:
    type: String
    description: (Optional) The recovery point in time in format YYYY-MM-DDTHH:MM:SSZ
    allowedPattern: "^None$|^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d[0-5]\\d|Z)$"
    default: "None"
  CopyAllProperties:
    type: Boolean
    description: (Optional) If True copies all the settings from Source table to the restored on
    default: True
  DynamoDBSourceTableAlarmNames:
    type: StringList
    description: (Optional) The DynamoDB Source Table Name Alarm Names.
    default:
      - "non-existing-alarm"
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
mainSteps:
  - name: verifyDynamoDBTableTargetStatus
    action: aws:assertAwsResourceProperty
    onFailure: Abort
    inputs:
      Service: dynamodb
      Api: DescribeTable
      TableName: "{{ DynamoDBTableSourceName }}"
      PropertySelector: "$.Table.TableStatus"
      DesiredValues:
        - "ACTIVE"
    nextStep: enableDynamoDBTargetTablePointInTimeRecovery
  - name: enableDynamoDBTargetTablePointInTimeRecovery
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: dynamodb
      Api: UpdateContinuousBackups
      TableName: "{{ DynamoDBTableSourceName }}"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  - name: ParseRecoveryPointDateTime
    action: aws:executeScript
    outputs:
      - Name: RecoveryPointDateTime
        Selector: $.Payload.RecoveryPointDateTime
        Type: String
      - Name: UseLatestRecoveryPoint
        Selector: $.Payload.UseLatestRecoveryPoint
        Type: Boolean
    inputs:
      Runtime: python3.6
      Handler: parse_recovery_date_time
      InputPayload:
        RecoveryPointDateTime: "{{RecoveryPointDateTime}}"
      Script: |-
        SCRIPT_PLACEHOLDER::dynamo_db_util.imports

        SCRIPT_PLACEHOLDER::dynamo_db_util._parse_date_time
        SCRIPT_PLACEHOLDER::dynamo_db_util.parse_recovery_date_time
  - name: CheckIfUseLatestRecoveryPoint
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RestoreDynamoDBTableLatestToPointInTime
          Variable: "{{ParseRecoveryPointDateTime.UseLatestRecoveryPoint}}"
          BooleanEquals: true
      Default: RestoreDynamoDBTableToPointInTime
  - name: RestoreDynamoDBTableLatestToPointInTime
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: dynamodb
      Api: RestoreTableToPointInTime
      SourceTableName: "{{ DynamoDBTableSourceName }}"
      TargetTableName: "{{ DynamoDBTableTargetName }}"
      UseLatestRestorableTime: True # Restore the table to the latest possible time. LatestRestorableDateTime is typically 5 minutes before the current time.
    outputs:
      - Name: TableDescription
        Selector: "$.TableDescription"
        Type: StringMap
    nextStep: WaitTableToBeActive
  - name: RestoreDynamoDBTableToPointInTime
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: dynamodb
      Api: RestoreTableToPointInTime
      SourceTableName: "{{ DynamoDBTableSourceName }}"
      TargetTableName: "{{ DynamoDBTableTargetName }}"
      RestoreDateTime: "{{ ParseRecoveryPointDateTime.RecoveryPointDateTime }}"
    outputs:
      - Name: TableDescription
        Selector: "$.TableDescription"
        Type: StringMap
    nextStep: WaitTableToBeActive
  - name: WaitTableToBeActive
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 600
    inputs:
      Service: dynamodb
      Api: DescribeTable
      TableName: "{{DynamoDBTableTargetName}}"
      PropertySelector: "$.Table.TableStatus"
      DesiredValues:
        - "ACTIVE"
  - name: CheckIfNeedToCopyAllProperties
    action: aws:branch
    inputs:
      Choices:
        - NextStep: CopyAllTableProperties
          Variable: "{{CopyAllProperties}}"
          BooleanEquals: true
  - name: CopyAllTableProperties
    action: 'aws:executeAutomation'
    onFailure: Abort
    inputs:
      DocumentName: Digito-CopyDynamoDBTableProperties_2020-04-01
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        DynamoDBTableSourceName: '{{DynamoDBTableSourceName}}'
        DynamoDBTableTargetName: '{{DynamoDBTableTargetName}}'
        DynamoDBSourceTableAlarmNames: '{{DynamoDBSourceTableAlarmNames}}'
    isEnd: true