#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Changes Concurrency Limit of Lambda Function"
schemaVersion: "0.3"
assumeRole: "{{AutomationAssumeRole}}"
outputs:
  - "CheckConcurrentExecutionsQuota.ConcurrentExecutionsQuota"
  - "CalculateTotalReservedConcurrencyOfExistingLambdas.TotalReservedConcurrency"
  - "CheckFeasibility.MaximumPossibleReservedConcurrency"
  - "SetReservedConcurrentExecutions.ReservedConcurrencyLeft"
  - "SetReservedConcurrentExecutions.NewReservedConcurrencyValue"

parameters:
  LambdaARN:
    type: String
    description: (Required) The ARN of the Lambda function.
  NewReservedConcurrentExecutions:
    type: Integer
    description: (Required) New reserved concurrent executions
    default: 0
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.

mainSteps:
  - name: RecordStartTime
    action: 'aws:executeScript'
    outputs:
      - Name: StartTime
        Selector: $.Payload
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.start_time

  - name: CheckConcurrentExecutionsQuota
    action: aws:executeScript
    description: Get the current or default quota for AWS Lambda Service
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: get_concurrent_execution_quota
      Script: |-
        SCRIPT_PLACEHOLDER::lambda_util.imports
        SCRIPT_PLACEHOLDER::lambda_util.get_concurrent_execution_quota
    outputs:
      - Name: ConcurrentExecutionsQuota
        Selector: $.Payload.ConcurrentExecutionsQuota
        Type: Integer

  - name: CalculateTotalReservedConcurrencyOfExistingLambdas
    action: aws:executeScript
    description: Get total reserved concurrency for all Lambda functions
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: calculate_total_reserved_concurrency
      InputPayload:
        LambdaARN: '{{ LambdaARN }}'
      Script: |-
        SCRIPT_PLACEHOLDER::lambda_util.imports
        SCRIPT_PLACEHOLDER::lambda_util.calculate_total_reserved_concurrency
    outputs:
      - Name: TotalReservedConcurrency
        Selector: $.Payload.TotalReservedConcurrency
        Type: Integer

  - name: CheckFeasibility
    action: aws:executeScript
    description: Checks if it's possible to set given value of `NewReservedConcurrentExecutions`
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: check_feasibility
      InputPayload:
        ConcurrentExecutionsQuota: '{{ CheckConcurrentExecutionsQuota.ConcurrentExecutionsQuota }}'
        TotalReservedConcurrency: '{{ CalculateTotalReservedConcurrencyOfExistingLambdas.TotalReservedConcurrency }}'
        NewReservedConcurrentExecutions: '{{ NewReservedConcurrentExecutions }}'
      Script: |-
        SCRIPT_PLACEHOLDER::lambda_util.imports
        SCRIPT_PLACEHOLDER::lambda_util.check_feasibility
    outputs:
      - Name: MaximumPossibleReservedConcurrency
        Selector: $.Payload.MaximumPossibleReservedConcurrency
        Type: Integer
      - Name: CanSetReservedConcurrency
        Selector: $.Payload.CanSetReservedConcurrency
        Type: Boolean

  - name: SetReservedConcurrentExecutions
    action: aws:executeScript
    description: Set new reserved Concurrent Executions
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: set_reserved_concurrent_executions
      InputPayload:
        LambdaARN: '{{ LambdaARN }}'
        NewReservedConcurrentExecutions: '{{ NewReservedConcurrentExecutions }}'
        MaximumPossibleReservedConcurrency: '{{ CheckFeasibility.MaximumPossibleReservedConcurrency }}'
      Script: |-
        SCRIPT_PLACEHOLDER::lambda_util.imports
        SCRIPT_PLACEHOLDER::lambda_util.set_reserved_concurrent_executions
    outputs:
      - Name: NewReservedConcurrencyValue
        Selector: $.Payload.NewReservedConcurrencyValue
        Type: Integer
      - Name: ReservedConcurrencyLeft
        Selector: $.Payload.ReservedConcurrencyLeft
        Type: Integer

  - name: OutputRecoveryTime
    action: 'aws:executeScript'
    outputs:
      - Name: RecoveryTime
        Selector: $.Payload
        Type: Integer
    inputs:
      Runtime: python3.7
      Handler: recovery_time
      Script: |-
        SCRIPT_PLACEHOLDER::common_util.imports
        SCRIPT_PLACEHOLDER::common_util.recovery_time
      InputPayload:
        StartTime: '{{ RecordStartTime.StartTime }}'
