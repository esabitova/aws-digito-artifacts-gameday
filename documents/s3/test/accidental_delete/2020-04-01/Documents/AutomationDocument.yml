#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "Test to accidentally delete files from S3 bucket"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  S3BucketWhereObjectsWillBeDeletedFrom:
    type: String
    description: (Required) The S3 Bucket Name where objects will be deleted.
  S3BucketToRestoreWhereObjectWillBeCopiedTo:
    type: String
    description: (Required) The S3 Bucket Name where objects will be copied.
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  S3UserErrorAlarmName:
    type: String
    description: (Required) ARN of the role that allows Automation to perform the actions on your behalf.
  SNSTopicARNForManualApproval:
    type: String
    description: (Required) The ARN of the SNS Topic where a user will receive the notification about the manual approval of bucket clean-up if some files exist there.
  IAMPrincipalForManualApproval:
    type: String
    description: (Required) ARN of AWS authenticated principal who are able to either approve or reject the clean-up of bucket if there are some files. Can be either an AWS Identity and Access
      Management (IAM) user name or IAM user ARN or IAM role ARN or IAM assume role user ARN
  IsRollback:
    type: String
    description: >-
      (Optional) Provide true to cleanup appliance created in previous execution. Can be true or false
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
  ForceCleanBucketToRestoreWhereObjectWillBeCopiedTo:
    type: Boolean
    description: |-
      (Optional) If it is true, approve cleaning of the bucket automatically where objects will be copied to if they exist there.
      Otherwise, give a user a chance to decide. It is false by default.
    default: false
mainSteps:
  - name: CheckIsRollback
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetS3BucketWhereObjectCouldBeDeletedFrom
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default:
        BackupS3BucketWhereObjectsWillBeDeletedFrom

  - name: GetS3BucketWhereObjectCouldBeDeletedFrom
    action: aws:executeScript
    outputs:
      - Name: S3BucketWhereObjectCouldBeDeletedFrom
        Selector: $.Payload.S3BackupBucketName
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_inputs_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupS3BucketWhereObjectsWillBeDeletedFrom'
        ResponseField: 'S3BackupBucketName'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_step_execution
  - name: GetS3BucketToRestoreWhereObjectWasCopiedTo
    action: aws:executeScript
    outputs:
      - Name: S3BucketToRestoreWhereObjectWasCopiedTo
        Selector: $.Payload.S3BucketToRestoreName
        Type: String
    inputs:
      Runtime: python3.6
      Handler: get_inputs_from_ssm_step_execution
      InputPayload:
        ExecutionId: '{{PreviousExecutionId}}'
        StepName: 'BackupS3BucketWhereObjectsWillBeDeletedFrom'
        ResponseField: 'S3BucketToRestoreName'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_step_execution
  - name: RollbackPreviousExecution
    action: aws:executeAutomation
    inputs:
      DocumentName: Digito-RestoreFromBackup_2020-09-21
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        SNSTopicARNForManualApproval: '{{SNSTopicARNForManualApproval}}'
        IAMPrincipalForManualApproval: '{{IAMPrincipalForManualApproval}}'
        S3BackupBucketName: '{{GetS3BucketToRestoreWhereObjectWasCopiedTo.S3BucketToRestoreWhereObjectWasCopiedTo}}'
        S3BucketToRestoreName: '{{GetS3BucketWhereObjectCouldBeDeletedFrom.S3BucketWhereObjectCouldBeDeletedFrom}}'
    isEnd: true

  - name: BackupS3BucketWhereObjectsWillBeDeletedFrom
    action: aws:executeAutomation
    inputs:
      DocumentName: Digito-RestoreFromBackup_2020-09-21
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        SNSTopicARNForManualApproval: '{{SNSTopicARNForManualApproval}}'
        IAMPrincipalForManualApproval: '{{IAMPrincipalForManualApproval}}'
        S3BackupBucketName: '{{S3BucketWhereObjectsWillBeDeletedFrom}}'
        S3BucketToRestoreName: '{{S3BucketToRestoreWhereObjectWillBeCopiedTo}}'
        ApproveCleanRestoreBucketAutomatically: '{{ForceCleanBucketToRestoreWhereObjectWillBeCopiedTo}}'
  - name: CleanS3BucketWhereObjectsWillBeDeletedFrom
    action: aws:executeAutomation
    inputs:
      DocumentName: Digito-CleanS3Bucket_2021-03-03
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        S3BucketNameToClean: '{{S3BucketWhereObjectsWillBeDeletedFrom}}'
  - name: AssertAlarmToBeRed
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 600
    onFailure: step:RollbackCurrentExecution
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{S3UserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]
  - name: RollbackCurrentExecution
    action: aws:executeAutomation
    inputs:
      DocumentName: Digito-RestoreFromBackup_2020-09-21
      RuntimeParameters:
        AutomationAssumeRole: '{{AutomationAssumeRole}}'
        SNSTopicARNForManualApproval: '{{SNSTopicARNForManualApproval}}'
        IAMPrincipalForManualApproval: '{{IAMPrincipalForManualApproval}}'
        S3BackupBucketName: '{{S3BucketToRestoreWhereObjectWillBeCopiedTo}}'
        S3BucketToRestoreName: '{{S3BucketWhereObjectsWillBeDeletedFrom}}'
  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 600
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{S3UserErrorAlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true