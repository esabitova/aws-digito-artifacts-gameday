#
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
description: "${description}"
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  ${primaryResourceIdentifier}:
    type: String
    description: (Required) ${primaryResourceIdentifier}
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
  ${alarmPrefix}AlarmName:
    type: String
    description: (Required) Alarm which should be red after injection of the failure and green after the rollback process in the end of the test.
  IsRollback:
    type: String
    description: >-
      (Optional) Run rollback step of the given previous execution (parameter `PreviousExecutionId`). Can be either true or false.
    default: 'false'
  PreviousExecutionId:
    type: String
    description: >-
      (Optional) Previous execution id for which resources need to be cleaned up.
    default: ''
mainSteps:
  - name: CheckIsRollback
    action: aws:branch
    inputs:
      Choices:
        - NextStep: PrepareRollbackOfPreviousExecution
          Variable: "{{IsRollback}}"
          StringEquals: 'true'
      Default: AssertAlarmToBeGreenBeforeTest

  - name: GetInputsFromPreviousExecution
    action: aws:executeScript
    outputs:
      - Name: ${primaryResourceIdentifier}
        Selector: $.Payload.${primaryResourceIdentifier}[0]
        Type: String
    inputs:
      Runtime: python3.7
      Handler: get_inputs_from_ssm_execution
      InputPayload:
        ExecutionId: '{{ PreviousExecutionId }}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.get_inputs_from_ssm_execution

  - name: Assert${primaryResourceIdentifier}
    action: aws:branch
    inputs:
      Choices:
        - NextStep: RollbackPreviousExecution
          Variable: "{{ GetInputsFromPreviousExecution.${primaryResourceIdentifier} }}"
          StringEquals: '{{ ${primaryResourceIdentifier} }}'
    isEnd: true

  - name: RollbackPreviousExecution
    # add logic for rolling back here
    isEnd: true

  - name: AssertAlarmToBeGreenBeforeTest
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 300
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{${alarmPrefix}AlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: ["OK"]
  - name: BackupCurrentExecution
    # add any logic to backup the current state of resources here and emit these as step outputs
    # The outputs from these steps can be used by RollbackCurrentExecution or PrepareRollbackOfPreviousExecution steps
    # to return resources to their original states

  - name: InjectFailure
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    # add one or more steps to inject failures

  - name: AssertAlarmToBeRed
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 900
    onFailure: step:RollbackCurrentExecution
    onCancel: step:TriggerRollback
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{${alarmPrefix}AlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "ALARM" ]

  - name: RollbackCurrentExecution
    maxAttempts: 5
    onCancel: step:TriggerRollback
    # add logic to rollback here

  - name: AssertAlarmToBeGreen
    action: aws:waitForAwsResourceProperty
    maxAttempts: 1
    timeoutSeconds: 900
    inputs:
      Service: cloudwatch
      Api: DescribeAlarms
      AlarmNames:
        - "{{${alarmPrefix}AlarmName}}"
      PropertySelector: "$.MetricAlarms[0].StateValue"
      DesiredValues: [ "OK" ]
    isEnd: true

  - name: TriggerRollback
    action: 'aws:executeScript'
    onFailure: Abort
    outputs:
      - Name: RollbackExecutionId
        Selector: $.Payload.RollbackExecutionId
        Type: String
    inputs:
      Runtime: python3.7
      Handler: start_rollback_execution
      InputPayload:
        ExecutionId: '{{automation:EXECUTION_ID}}'
      Script: |-
        SCRIPT_PLACEHOLDER::ssm_execution_util.imports

        SCRIPT_PLACEHOLDER::ssm_execution_util.start_rollback_execution
    isEnd: true