# This is a basic workflow to help you get started with Actions

name: Executing SSM tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the mainline branch
on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
   build:
    runs-on: ubuntu-latest
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [3.6]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest_bdd
        pip install pytest_html
        pip install pytest-cov
        cd ./documents/util/scripts
        pip install -r ./requirements.txt
        cd ../../..
        
    #- name: Lint with flake8
      #run: |
        # stop the build if there are Python syntax errors or undefined names
        #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |

        cd ./documents/util/scripts
        pytest --cov=src/ --cov-report term --cov-report html
        cd ../../..
        
        mkdir -p ~/.aws
        touch ~/.aws/credentials
        echo "[default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" > ~/.aws/credentials
        BUCKET_ID=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)
        aws s3api create-bucket --bucket $BUCKET_ID --region us-west-2 --create-bucket-configuration LocationConstraint=us-west-2
        
        aws s3 cp ./documentation/coverage/ s3://$BUCKET_ID/ --region us-west-2 --recursive > ./aws.log
        
        rm -rf ~/.aws
        
        echo "====================== Coverage Report ================="
        echo " "
        echo "  http://$BUCKET_ID.s3-website-us-west-2.amazonaws.com  "
        echo " "
        echo "========================================================"



   
