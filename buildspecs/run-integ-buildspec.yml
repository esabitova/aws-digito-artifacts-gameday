version: 0.2

phases:
  install:
    #If you use the Ubuntu standard image 2.0 or later, you must specify runtime-versions.
    #If you specify runtime-versions and use an image other than Ubuntu standard image 2.0, the build fails.
    runtime-versions:
      python: latest
    commands:
      - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
      - python get-pip.py
      - python -m pip install -r requirements.txt
      - pip install --upgrade awscli
      - aws --version
      - rm -rf documents/docdb/test/database_alarm/2020-09-21/Test/canary/package # Clean canary package files before creation of a new distribution package for database_alarm.feature test of DocumentDB
      - rm -f documents/docdb/test/database_alarm/2020-09-21/Test/canary/*.zip #todo DIG-977 create CW Canary distribution package in database_alarm.feature
      - pip install --target documents/docdb/test/database_alarm/2020-09-21/Test/canary/package/python -r documents/docdb/test/database_alarm/2020-09-21/Test/canary/requirements.txt # Install all requirements for database_alarm.feature test of DocumentDB
      - zip -r documents/docdb/test/database_alarm/2020-09-21/Test/canary/database-alarm-canary.zip documents/docdb/test/database_alarm/2020-09-21/Test/canary/package # Zip all dependencies and source files for
      - zip -g documents/docdb/test/database_alarm/2020-09-21/Test/canary/database-alarm-canary.zip documents/docdb/test/database_alarm/2020-09-21/Test/canary/python/*
  pre_build:
    commands:
      - TEMP_ROLE=`aws sts assume-role --role-arn $ASSUME_ROLE_ARN --role-session-name test`
      - export TEMP_ROLE
      - export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken')
      - export AWS_STS_REGIONAL_ENDPOINTS=regional
      - mkdir -p ~/.aws
      - touch ~/.aws/credentials
      - printf "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\naws_session_token=$AWS_SESSION_TOKEN\nsts_regional_endpoints=$AWS_STS_REGIONAL_ENDPOINTS" > ~/.aws/credentials
  build:
    commands:
      - echo "Executing test group [`echo $TEST_GROUP`] with [`echo $WORKERS`] workers."
      - python -m pytest --run_integration_tests --keep_test_resources --distributed_mode -m `echo $TEST_GROUP` --workers `echo $WORKERS` --pool_size AsgCfnTemplate=8,EC2WithCWAgentCfnTemplate=8,SqsTemplate=8,RestApiGwTemplate=4,EFSTemplate=8,DynamoDBTemplateWithProvisionedBilling=2,DynamoDBTemplate=4,DynamoDBTemplateWithStream=2,DynamoDBTemplateWithKinesis=2,DynamoDBTemplateWithIndexAndContributorInsights=2,DynamoDBTemplateWithAutoScaling=2 --cucumberjson=integration-tests-report.json
reports:
  integration-tests-report:
    files:
     - integration-tests-report.json
    file-format: CucumberJson
